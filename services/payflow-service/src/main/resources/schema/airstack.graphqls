directive @binding(constraint: String!, errorCode: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @db(collectionFieldName: String, sqlTableName: String, startPrefix: String, endPrefix: String, isStartExclusive: String, isEndExclusive: String, isHexField: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

input AccountOrderBy {
  createdAtBlockTimestamp: OrderBy
}

scalar Address

input Address_Comparator_Exp {
  _eq: Address
  _ne: Address
  _in: [Address!]
  _nin: [Address!]
}

type AnimationUrlVariants {
  original: String
}

scalar Any

enum Audience {
  farcaster
  all
}

type AudioVariants {
  original: String
}

enum Blockchain {
  ethereum
}

input Boolean_Comparator_Exp {
  _eq: Boolean
}

type CastValue {
  hash: String
  rawValue: String
  formattedValue: Float
}

type ConnectedAddress {
  address: Address
  chainId: String
  blockchain: String
  timestamp: Time
}

input Date_Range_Comparator_Exp {
  _eq: String
}

scalar DateRange

type Domain {
  """Airstack unique identifier for the data point"""
  id: ID

  """Parent domain name, if the entity is a subdomain"""
  parent: String

  """Owner of token associated with the domain"""
  owner: Address!

  """
  Owner wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  ownerDetails: Wallet

  """
  Nested query - on-chain resolvedAddress wallet related information, including
  address, domains, social profile, other token balances, and transfer history
  """
  resolvedAddressDetails: Wallet

  """Blockchain address to which the domain is resolved"""
  resolvedAddress: Address

  """Resolver address associated with Domain"""
  resolverAddress: Address

  """Timestamp when the domain registration expires"""
  expiryTimestamp: Time

  """Indicates if the domain is set to be primary - true or false"""
  isPrimary: Boolean

  """
  Domain name without the domain ending, e.g. vitalik instead of vitalik.eth
  """
  labelName: String

  """Airstack unique domain hash"""
  labelHash: String

  """Full domain name, e.g. vitalik.eth"""
  name: String

  """Nested query - can retrieve payment token data (name, symbol, etc.)"""
  paymentToken: Address

  """payment amount in blockchain native token for the domain"""
  paymentTokenCostInNativeToken: Float

  """payment amount in USDC for the domain"""
  paymentTokenCostInUSDC: Float

  """Domain registration cost"""
  registrationCost: String

  """Domain registration cost in blockchain native token"""
  registrationCostInNativeToken: String

  """Domain registration cost in USDC"""
  registrationCostInUSDC: String

  """Domain registration cost in decimals"""
  formattedRegistrationCost: Float

  """Domain registration cost in native blockchain token in decimals"""
  formattedRegistrationCostInNativeToken: Float

  """Domain registration cost in USDC in decimals"""
  formattedRegistrationCostInUSDC: Float

  """
  Nested query allowing to retrieve subdomain information associated with the domain
  """
  subDomains(input: DomainsNestedInput): [Domain]

  """Count of subdomains linked to the domain"""
  subDomainCount: Int

  """Domain Token ID associated with the domain, if applicable"""
  tokenId: String

  """Time-to-live value for the domain"""
  ttl: String

  """Unique identifier for the blockchain"""
  chainId: String

  """Blockchain where the NFT sale took place"""
  blockchain: Blockchain!

  """DApp name associated with the domain (e.g. ENS)"""
  dappName: DomainDappName

  """DApp slug (contract version) associated with the domain"""
  dappSlug: DomainDappSlug

  """Block number when the domain was created"""
  createdAtBlockNumber: Int

  """Timestamp when the domain was created"""
  createdAtBlockTimestamp: Time

  """Block number when the domain was last updated"""
  lastUpdatedBlockNumber: Int

  """Timestamp when the domain was last updated"""
  lastUpdatedBlockTimestamp: Time

  """Token Address associated with the domain, if applicable"""
  tokenAddress: Address!

  """Manager of Domain"""
  manager: Address!

  """
  Manager wallet related information, including address, domains, social profile, other token balances, and transfer history
  """
  managerDetails: Wallet

  """Avatar of the domain"""
  avatar: String

  """Texts associated with the domain"""
  texts: [DomainTexts!]

  """Domain is name wrapped or not"""
  isNameWrapped: Boolean

  """Multichain associated with the domain"""
  multiChainAddresses: [DomainMultiChainAddress!]
}

enum DomainDappName {
  ens
}

input DomainDappName_Comparator_Exp {
  _eq: DomainDappName
  _in: [DomainDappName!]
}

enum DomainDappSlug {
  ens_v1
}

input DomainDappSlug_Comparator_Exp {
  _eq: DomainDappSlug
  _in: [DomainDappSlug!]
}

input DomainFilter {
  owner: Identity_Comparator_Exp
  resolvedAddress: Address_Comparator_Exp
  isPrimary: Boolean_Comparator_Exp
  name: String_Comparator_Exp
  lastUpdatedBlockTimestamp: Time_Comparator_Exp
}

type DomainMultiChainAddress {
  """symbol according to SLIP-0044"""
  symbol: String

  """address"""
  address: String
}

input DomainOrderBy {
  expiryTimestamp: OrderBy
  createdAtBlockTimestamp: OrderBy
  lastUpdatedBlockTimestamp: OrderBy
}

input DomainsInput {
  order: [DomainOrderBy!]
  filter: DomainFilter!
  blockchain: Blockchain!
  limit: Int
  cursor: String
}

input DomainsNestedInput {
  order: [DomainOrderBy]
  filter: DomainFilter
  blockchain: Blockchain
  limit: Int
}

type DomainsOutput {
  Domain: [Domain!]
  pageInfo: PageInfo
}

type DomainTexts {
  """key of the text"""
  key: String

  """value of the text"""
  value: String
}

enum EarnerType {
  CREATOR
  CREATOR_FANS
  CHANNEL_FANS
  NETWORK
}

enum EveryBlockchain {
  ALL
}

type FarcasterCast {
  id: String
  fid: String
  text: String
  rawText: String
  parentFid: String
  hash: String
  rootParentUrl: String
  parentHash: String
  url: String
  embeds: [Map]
  mentions: [Mentions!]
  castedAtTimestamp: Time
  frame: FarcasterFrame
  parentCast: FarcasterCast
  quotedCast: [FarcasterCast]
  channel: FarcasterChannel
  castedBy: Social
  numberOfLikes: Int
  numberOfRecasts: Int
  numberOfReplies: Int
  socialCapitalValue: SocialCapitalValue
  notaTokenEarned: SocialCapitalValue
  moxieEarningsSplit: [MoxieEarningsSplit]
  castValue: CastValue
}

input FarcasterCastFilter {
  frameUrl: String_Eq_In_Comparator_Exp
  castedBy: Identity_Comparator_Exp
  hash: String_Eq_In_Comparator_Exp
  url: String_Eq_In_Comparator_Exp
  hasFrames: Boolean_Comparator_Exp
  hasEmbeds: Boolean_Comparator_Exp
  hasMentions: Boolean_Comparator_Exp
  castedAtTimestamp: Time_Comparator_Exp
  rootParentUrl: String_Eq_In_Comparator_Exp
}

input FarcasterCastInput {
  filter: FarcasterCastFilter!
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

type FarcasterCastOutput {
  Cast: [FarcasterCast!]
  pageInfo: PageInfo
}

type FarcasterChannel {
  """Airstack unique identifier for the data point"""
  id: ID!
  dappName: String!
  dappSlug: String!
  channelId: String!
  name: String!
  url: String!
  description: String!
  imageUrl: String!
  leadIds: [String!]
  leadProfiles(input: SocialsNestedInput): [Social!]
  moderatorIds: [String!]
  moderatorProfiles(input: SocialsNestedInput): [Social!]
  isModerationEnabled: Boolean
  createdAtTimestamp: Time!
  followerCount: Int
  participants(input: FarcasterChannelParticipantNestedInput): [FarcasterChannelParticipant!]
}

enum FarcasterChannelActionType {
  cast
  reply
  follow
}

input FarcasterChannelActionType_Comparator_Exp {
  _eq: FarcasterChannelActionType
  _in: [FarcasterChannelActionType!]
}

input FarcasterChannelFilter {
  channelId: Regex_String_Comparator_Exp
  name: Regex_String_Comparator_Exp
  leadId: String_Comparator_Exp
  leadIdentity: Identity_Comparator_Exp
  moderatorId: String_Comparator_Exp
  moderatorIdentity: Identity_Comparator_Exp
  createdAtTimestamp: Time_Comparator_Exp
  url: String_Comparator_Exp
}

input FarcasterChannelNestedInput {
  blockchain: EveryBlockchain
  filter: FarcasterChannelFilter
  order: [FarcasterChannelOrderBy]
  limit: Int
}

input FarcasterChannelOrderBy {
  createdAtTimestamp: OrderBy
  followerCount: OrderBy
}

type FarcasterChannelParticipant {
  """Airstack unique identifier for the data point"""
  id: ID
  dappName: String!
  dappSlug: String!
  channelId: String!
  channelName: String!
  participantId: String!
  participant(input: SocialsNestedInput): Social
  channel(input: FarcasterChannelNestedInput): FarcasterChannel
  lastActionTimestamp: Time!
  lastRepliedTimestamp: Time
  lastCastedTimestamp: Time
  lastFollowedTimestamp: Time
  channelActions: [FarcasterChannelActionType!]
}

input FarcasterChannelParticipantFilter {
  participant: Identity_Comparator_Exp
  channelId: Regex_String_Comparator_Exp
  channelName: Regex_String_Comparator_Exp
  channelActions: FarcasterChannelActionType_Comparator_Exp
  lastActionTimestamp: Time_Comparator_Exp
}

input FarcasterChannelParticipantNestedInput {
  blockchain: EveryBlockchain
  filter: FarcasterChannelParticipantFilter
  order: [FarcasterChannelParticipantOrderBy]
  limit: Int
}

input FarcasterChannelParticipantOrderBy {
  lastActionTimestamp: OrderBy
}

input FarcasterChannelParticipantsInput {
  filter: FarcasterChannelParticipantFilter!
  order: [FarcasterChannelParticipantOrderBy!]
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

type FarcasterChannelParticipantsOutput {
  pageInfo: PageInfo
  FarcasterChannelParticipant: [FarcasterChannelParticipant!]
}

input FarcasterChannelsInput {
  filter: FarcasterChannelFilter
  order: [FarcasterChannelOrderBy!]
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

type FarcasterChannelsOutput {
  pageInfo: PageInfo
  FarcasterChannel: [FarcasterChannel!]
}

type FarcasterFanTokenAuction {
  auctionId: Int
  entityId: String!
  entityType: FarcasterFanTokenAuctionEntityType!
  status: FarcasterFanTokenAuctionStatusType!
  estimatedStartTimestamp: Time!
  estimatedEndTimestamp: Time!
  decimals: Int
  auctionSupply: Float
  minPriceInMoxie: Float
  subjectAddress: String
  minBiddingAmount: Float
  minFundingAmount: Float
  entityName: String
  entitySymbol: String
  launchCastUrl: String
  channel: FarcasterChannel
  socials(input: SocialsNestedInput): [Social]
  rewardDistributionPercentage: RewardDistributionPercentage
}

enum FarcasterFanTokenAuctionEntityType {
  CHANNEL
  NETWORK
  USER
}

input FarcasterFanTokenAuctionEntityType_Comparator_Exp {
  _eq: FarcasterFanTokenAuctionEntityType
  _in: [FarcasterFanTokenAuctionEntityType!]
}

input FarcasterFanTokenAuctionsFilter {
  status: FarcasterFanTokenAuctionStatusType_Comparator_Exp
  entityId: String_Eq_In_Comparator_Exp
  entityName: String_Eq_In_Comparator_Exp
  entityType: FarcasterFanTokenAuctionEntityType_Comparator_Exp!
}

input FarcasterFanTokenAuctionsInput {
  filter: FarcasterFanTokenAuctionsFilter!
  blockchain: EveryBlockchain!
  order: [FarcasterFanTokenAuctionsOrderBy!]
  limit: Int
  cursor: String
}

input FarcasterFanTokenAuctionsOrderBy {
  estimatedStartTimestamp: OrderBy
  estimatedEndTimestamp: OrderBy
}

type FarcasterFanTokenAuctionsOutput {
  FarcasterFanTokenAuction: [FarcasterFanTokenAuction!]
  pageInfo: PageInfo
}

enum FarcasterFanTokenAuctionStatusType {
  UPCOMING
  ACTIVE
  COMPLETED
}

input FarcasterFanTokenAuctionStatusType_Comparator_Exp {
  _eq: FarcasterFanTokenAuctionStatusType
  _in: [FarcasterFanTokenAuctionStatusType!]
}

type FarcasterFrame {
  frameHash: String
  frameUrl: String
  postUrl: String
  inputText: String
  imageAspectRatio: String
  imageUrl: String
  state: String
  buttons: [FrameButton!]
  castedAtTimestamp: Time
}

input FarcasterFrameMessageInput {
  filter: FarcasterFrameMessageInputFilter!
}

input FarcasterFrameMessageInputFilter {
  messageBytes: String
}

type FarcasterFrameMessageOutput {
  isValid: Boolean
  messageByte: String
  messageRaw: Map
  message: FrameMessage
  castedByFid: Int
  castedBy: Social
  interactedByFid: Int
  interactedBy: Social
}

type FarcasterMoxieClaimDetails {
  fid: String
  availableClaimAmount: Float
  availableClaimAmountInWei: String
  claimedAmount: Float
  claimedAmountInWei: String
  processingAmount: Float
  processingAmountInWei: String
  tokenAddress: String
  chainId: String
  socials(input: SocialsNestedInput): [Social]
}

input FarcasterMoxieClaimDetailsFilter {
  fid: String_Eq_In_Comparator_Exp
}

input FarcasterMoxieClaimDetailsInput {
  filter: FarcasterMoxieClaimDetailsFilter!
  blockchain: EveryBlockchain!
  order: [FarcasterMoxieClaimDetailsOrderBy!]
  limit: Int
  cursor: String
}

input FarcasterMoxieClaimDetailsOrderBy {
  availableClaimAmount: OrderBy
  claimedAmount: OrderBy
  processingAmount: OrderBy
}

type FarcasterMoxieClaimDetailsOutput {
  FarcasterMoxieClaimDetails: [FarcasterMoxieClaimDetails!]
  pageInfo: PageInfo
}

type FarcasterMoxieEarningStat {
  entityId: String!
  entityType: FarcasterMoxieEarningStatsEntityType!
  allEarningsAmount: Float
  allEarningsAmountInWei: String
  castEarningsAmount: Float
  castEarningsAmountInWei: String
  frameDevEarningsAmount: Float
  frameDevEarningsAmountInWei: String
  otherEarningsAmount: Float
  otherEarningsAmountInWei: String
  channel: FarcasterChannel
  socials(input: SocialsNestedInput): [Social]
  timeframe: FarcasterMoxieEarningStatsTimeframe!
  startTimestamp: Time!
  endTimestamp: Time!
}

enum FarcasterMoxieEarningStatsEntityType {
  CHANNEL
  NETWORK
  USER
}

input FarcasterMoxieEarningStatsEntityType_Comparator_Exp {
  _eq: FarcasterMoxieEarningStatsEntityType
  _in: [FarcasterMoxieEarningStatsEntityType!]
}

input FarcasterMoxieEarningStatsFilter {
  entityId: String_Eq_In_Comparator_Exp
  entityType: FarcasterMoxieEarningStatsEntityType_Comparator_Exp!
}

input FarcasterMoxieEarningStatsInput {
  filter: FarcasterMoxieEarningStatsFilter!
  timeframe: FarcasterMoxieEarningStatsTimeframe!
  blockchain: EveryBlockchain!
  order: [FarcasterMoxieEarningStatsOrderBy!]
  limit: Int
  cursor: String
}

input FarcasterMoxieEarningStatsOrderBy {
  allEarnings: OrderBy
  castEarnings: OrderBy
  frameDevEarnings: OrderBy
  otherEarnings: OrderBy
}

type FarcasterMoxieEarningStatsOutput {
  FarcasterMoxieEarningStat: [FarcasterMoxieEarningStat!]
  pageInfo: PageInfo
}

enum FarcasterMoxieEarningStatsTimeframe {
  TODAY
  WEEKLY
  LIFETIME
}

type FarcasterNotaEarningStat {
  entityId: String!
  entityType: FarcasterFanTokenAuctionEntityType!
  allEarningsAmount: Float
  allEarningsAmountInWei: String
  castEarningsAmount: Float
  castEarningsAmountInWei: String
  frameDevEarningsAmount: Float
  frameDevEarningsAmountInWei: String
  otherEarningsAmount: Float
  otherEarningsAmountInWei: String
  channel: FarcasterChannel
  socials(input: SocialsNestedInput): [Social]
  timeframe: FarcasterNotaEarningStatsTimeframe!
  startTimestamp: Time!
  endTimestamp: Time!
}

enum FarcasterNotaEarningStatsEntityType {
  CHANNEL
  USER
}

input FarcasterNotaEarningStatsEntityType_Comparator_Exp {
  _eq: FarcasterNotaEarningStatsEntityType
  _in: [FarcasterNotaEarningStatsEntityType!]
}

input FarcasterNotaEarningStatsFilter {
  entityId: String_Eq_In_Comparator_Exp
  entityType: FarcasterNotaEarningStatsEntityType_Comparator_Exp!
}

input FarcasterNotaEarningStatsInput {
  filter: FarcasterNotaEarningStatsFilter!
  timeframe: FarcasterNotaEarningStatsTimeframe!
  blockchain: EveryBlockchain!
  order: [FarcasterNotaEarningStatsOrderBy!]
  limit: Int
  cursor: String
}

input FarcasterNotaEarningStatsOrderBy {
  allEarnings: OrderBy
  castEarnings: OrderBy
  frameDevEarnings: OrderBy
  otherEarnings: OrderBy
}

type FarcasterNotaEarningStatsOutput {
  FarcasterNotaEarningStat: [FarcasterNotaEarningStat!]
  pageInfo: PageInfo
}

enum FarcasterNotaEarningStatsTimeframe {
  LIFETIME
}

input FarcasterQuotedRecastsFilter {
  recastedBy: Identity_Comparator_Exp
  parentCastedBy: Identity_Comparator_Exp
  parentHash: String_Eq_In_Comparator_Exp
  parentUrl: String_Eq_In_Comparator_Exp
}

input FarcasterQuotedRecastsInput {
  filter: FarcasterQuotedRecastsFilter!
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

type FarcasterQuotedRecastsOutput {
  QuotedRecast: [FarcasterCast!]
  pageInfo: PageInfo
}

type FarcasterReaction {
  cast: FarcasterCast
  castHash: String
  reactedBy: Social
}

enum FarcasterReactionCriteria {
  liked
  replied
  recasted
}

input FarcasterReactionsFilter {
  criteria: FarcasterReactionCriteria!
  castHash: String_Eq_In_Comparator_Exp
  castUrl: String_Eq_In_Comparator_Exp
  frameUrl: String_Eq_In_Comparator_Exp
  reactedBy: Identity_Comparator_Exp
  channelId: Regex_String_Comparator_Exp
}

input FarcasterReactionsInput {
  filter: FarcasterReactionsFilter!
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

type FarcasterReactionsOutput {
  Criteria: FarcasterReactionCriteria
  Reaction: [FarcasterReaction!]
  pageInfo: PageInfo
}

input FarcasterRepliesFilter {
  repliedBy: Identity_Comparator_Exp
  parentCastedBy: Identity_Comparator_Exp
  parentHash: String_Eq_In_Comparator_Exp
  parentUrl: String_Eq_In_Comparator_Exp
  hash: String_Eq_In_Comparator_Exp
}

input FarcasterRepliesInput {
  filter: FarcasterRepliesFilter!
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

type FarcasterRepliesOutput {
  Reply: [FarcasterCast!]
  pageInfo: PageInfo
}

type FarcasterScore {
  farScoreRaw: String
  farScore: Float
  farRank: Int
  farBoost: Float
  tvlBoost: Float
  tvl: String
}

input Float_Comparator_Exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _lt: Float
  _lte: Float
  _ne: Float
  _in: [Float!]
  _nin: [Float!]
}

type FrameButton {
  id: String
  index: Int
  label: String
  action: String
  target: String
}

type FrameMessage {
  data: FrameMessageData
  hash: String
  hashScheme: String
  signature: String
  signatureScheme: String
  signer: String
}

type FrameMessageActionBody {
  url: String
  urlDecoded: String
  buttonIndex: Int
  castId: FrameMessageCastId
  inputText: String
  inputTextDecoded: String
  state: String
  stateDecoded: Any
  transactionId: String
  transactionHash: String
  address: String
}

type FrameMessageCastId {
  fid: Int
  hash: String
}

type FrameMessageData {
  type: String
  fid: Int
  time: Time
  network: String
  frameActionBody: FrameMessageActionBody
}

scalar Identity

input Identity_Comparator_Exp {
  _eq: Identity
  _in: [Identity!]
}

type ImageSizes {
  extraSmall: String
  small: String
  medium: String
  large: String
  original: String
}

input Int_Comparator_Exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _ne: Int
  _in: [Int!]
  _nin: [Int!]
}

input Int_String_Comparator_Exp {
  _eq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _ne: String
  _in: [String!]
  _nin: [String!]
}

scalar IntString

type LogoSizes {
  small: String
  medium: String
  large: String
  original: String
  external: String
}

scalar Map

type Media {
  image: ImageSizes
  video: VideoVariants
  audio: AudioVariants
  json: String
  animation_url: AnimationUrlVariants
}

type Mentions {
  fid: String
  position: Int
  profile: Social
}

type MoxieEarningsSplit {
  earnerType: EarnerType!
  earningsAmount: Float
  earningsAmountInWei: String
}

input NativeBalanceFilter {
  owner: Identity_Comparator_Exp
  formattedAmount: Float_Comparator_Exp
  lastUpdatedTimestamp: Time_Comparator_Exp
}

input NativeBalanceOrderBy {
  lastUpdatedTimestamp: OrderBy
}

enum OrderBy {
  ASC
  DESC
}

enum OrderByAsIntString {
  ASC
  DESC
}

type PageInfo {
  prevCursor: String!
  nextCursor: String!
  hasPrevPage: Boolean!
  hasNextPage: Boolean!
}

type PopularDapp {
  name: String
  description: String
  website: String
  blockchain: String
  chainId: String
  address: String
  criteriaCount: Int
  criteria: String
  userbase: String
  timeFrom: Time
  timeTo: Time
  lastTransactionHash: String
  lastTransactionTimestamp: Time
  lastTransactionBlockNumber: Int
}

enum PopularDappsCriteria {
  UNIQUE_USERS
  TOTAL_TRANSACTIONS
  GAS_SPENT
}

type Query {
  Domains(input: DomainsInput!): DomainsOutput
  Wallet(input: WalletInput!): Wallet
  Socials(input: SocialsInput!): SocialsOutput
  SocialFollowings(input: SocialFollowingInput!): SocialFollowingOutput
  SocialFollowers(input: SocialFollowerInput!): SocialFollowerOutput
  FarcasterChannels(input: FarcasterChannelsInput!): FarcasterChannelsOutput
  FarcasterChannelParticipants(input: FarcasterChannelParticipantsInput!): FarcasterChannelParticipantsOutput
  FarcasterValidateFrameMessage(input: FarcasterFrameMessageInput!): FarcasterFrameMessageOutput
  FarcasterCasts(input: FarcasterCastInput!): FarcasterCastOutput
  TrendingCasts(input: TrendingCastsInput!): TrendingCastsOutput
  FarcasterReplies(input: FarcasterRepliesInput!): FarcasterRepliesOutput
  FarcasterQuotedRecasts(input: FarcasterQuotedRecastsInput!): FarcasterQuotedRecastsOutput
  FarcasterReactions(input: FarcasterReactionsInput!): FarcasterReactionsOutput
  FarcasterFanTokenAuctions(input: FarcasterFanTokenAuctionsInput!): FarcasterFanTokenAuctionsOutput
  FarcasterNotaEarningStats(input: FarcasterNotaEarningStatsInput!): FarcasterNotaEarningStatsOutput
  FarcasterMoxieEarningStats(input: FarcasterMoxieEarningStatsInput!): FarcasterMoxieEarningStatsOutput
  FarcasterMoxieClaimDetails(input: FarcasterMoxieClaimDetailsInput!): FarcasterMoxieClaimDetailsOutput
}

scalar Range

input Range_Comparator_Exp {
  _eq: Int
}

input Regex_String_Comparator_Exp {
  _eq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _ne: String
  _regex: String
  _regex_in: [String!]
  _in: [String!]
  _nin: [String!]
}

type RewardDistributionPercentage {
  creator: Float!
  creatorFans: Float!
  channelFans: Float!
  network: Float!
}

input Simple_String_Comparator_Exp {
  _eq: String
  _ne: String
  _in: [String!]
  _nin: [String!]
}

type Social {
  """Airstack unique identifier for the data point"""
  id: ID

  """Unique identifier for the blockchain"""
  chainId: String

  """Blockchain associated with the social identity"""
  blockchain: Blockchain

  """Social DApp name"""
  dappName: SocialDappName

  """Social DApp slug (contract version)"""
  dappSlug: SocialDappSlug

  """Airstack unique dapp version number"""
  dappVersion: String
  userId: String
  userAddress: Address
  userAddressDetails: Wallet
  userAssociatedAddressDetails: [Wallet!]
  connectedAddresses: [ConnectedAddress!]
  userCreatedAtBlockTimestamp: Time
  userCreatedAtBlockNumber: Int
  userLastUpdatedAtBlockTimestamp: Time
  userLastUpdatedAtBlockNumber: Int
  userHomeURL: String
  userRecoveryAddress: Address

  """blockchain addresses associated with the social profile"""
  userAssociatedAddresses: [Address!]
  profileName: String
  profileTokenId: String
  profileTokenIdHex: String
  profileTokenAddress: String
  profileCreatedAtBlockTimestamp: Time
  profileCreatedAtBlockNumber: Int
  profileLastUpdatedAtBlockTimestamp: Time
  profileLastUpdatedAtBlockNumber: Int
  profileTokenUri: String
  isDefault: Boolean

  """
  Blockchain address, ENS domain name, social identity such as Farcaster (for
  Farcaster use 'fc_fid:' prefix followed by the Farcaster user ID like
  fc_fid:5650, or use 'fc_fname:' prefix followed by the Farcaster user ID like
  'fc_fname:vbuterin')
  """
  identity: Identity
  followerTokenAddress: Address
  followingCount: Int
  followerCount: Int
  followings(input: SocialFollowingNestedInput): SocialFollowingOutput
  followers(input: SocialFollowerNestedInput): SocialFollowerOutput
  profileBio: String
  profileDisplayName: String
  profileImage: String
  profileUrl: String
  fnames: [String]
  handleTokenAddress: Address
  handleTokenId: String
  metadataURI: String
  profileMetadata: Map
  coverImageURI: String
  twitterUserName: String
  website: String
  location: String
  profileImageContentValue: Media
  coverImageContentValue: Media
  profileHandle: String
  updatedAt: Time
  socialCapital: SocialCapital
  farcasterScore: FarcasterScore
}

type SocialCapital {
  socialCapitalScoreRaw: String
  socialCapitalScore: Float
  socialCapitalRank: Int
  farBoost: Float
  tvlBoost: Float
  tvl: String
}

type SocialCapitalValue {
  hash: String
  rawValue: String
  formattedValue: Float
}

enum SocialDappName {
  farcaster
}

input SocialDappName_Comparator_Exp {
  _eq: SocialDappName
  _in: [SocialDappName!]
}

enum SocialDappSlug {
  farcaster_optimism
  farcaster_goerli
  farcaster_v2_optimism
  farcaster_v3_optimism
}

input SocialDappSlug_Comparator_Exp {
  _eq: SocialDappSlug
  _in: [SocialDappSlug!]
}

input SocialFilter {
  dappName: SocialDappName_Comparator_Exp
  dappSlug: SocialDappSlug_Comparator_Exp
  userId: String_Comparator_Exp
  userAssociatedAddresses: Address_Comparator_Exp
  profileName: Regex_String_Comparator_Exp
  profileCreatedAtBlockTimestamp: Time_Comparator_Exp
  isDefault: Boolean_Comparator_Exp
  identity: Identity_Comparator_Exp
  followerCount: Int_Comparator_Exp
  followingCount: Int_Comparator_Exp
  updatedAt: Time_Comparator_Exp
  socialCapitalScore: Float_Comparator_Exp
  socialCapitalRank: Int_Comparator_Exp
  farScore: Float_Comparator_Exp
  farRank: Int_Comparator_Exp
}

type SocialFollower {
  id: ID
  blockchain: EveryBlockchain
  dappName: String
  dappSlug: String
  followingProfileId: String
  followingAddress: Wallet
  followerProfileId: String
  followerAddress: Wallet
  followerTokenId: String
  blockNumber: Int
  followerSince: Time
}

input SocialFollowerFilter {
  dappName: SocialDappName_Comparator_Exp
  dappSlug: SocialDappSlug_Comparator_Exp
  identity: Identity_Comparator_Exp
  followerSince: Time_Comparator_Exp
  blockNumber: Int_Comparator_Exp
  followerProfileId: String_Comparator_Exp
  followingProfileId: String_Comparator_Exp
}

input SocialFollowerInput {
  order: [SocialFollowerOrderBy!]
  filter: SocialFollowerFilter!
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

input SocialFollowerNestedInput {
  order: [SocialFollowerOrderBy]
  filter: SocialFollowerFilter
  blockchain: EveryBlockchain
  limit: Int
}

input SocialFollowerOrderBy {
  blockNumber: OrderBy
  followerSince: OrderBy
}

type SocialFollowerOutput {
  pageInfo: PageInfo
  Follower: [SocialFollower!]
}

type SocialFollowing {
  id: ID
  blockchain: EveryBlockchain
  dappName: String
  dappSlug: String
  followingProfileId: String
  followingAddress: Wallet
  followerProfileId: String
  followerAddress: Wallet
  followerTokenId: String
  blockNumber: Int
  followingSince: Time
}

input SocialFollowingFilter {
  dappName: SocialDappName_Comparator_Exp
  dappSlug: SocialDappSlug_Comparator_Exp
  identity: Identity_Comparator_Exp
  followingSince: Time_Comparator_Exp
  blockNumber: Int_Comparator_Exp
  followingProfileId: String_Comparator_Exp
  followerProfileId: String_Comparator_Exp
}

input SocialFollowingInput {
  order: [SocialFollowingOrderBy!]
  filter: SocialFollowingFilter!
  blockchain: EveryBlockchain!
  limit: Int
  cursor: String
}

input SocialFollowingNestedInput {
  order: [SocialFollowingOrderBy]
  filter: SocialFollowingFilter
  blockchain: EveryBlockchain
  limit: Int
}

input SocialFollowingOrderBy {
  blockNumber: OrderBy
  followingSince: OrderBy
}

type SocialFollowingOutput {
  pageInfo: PageInfo
  Following: [SocialFollowing!]
}

input SocialOrderBy {
  profileCreatedAtBlockTimestamp: OrderBy
  followerCount: OrderBy
  followingCount: OrderBy
  updatedAt: OrderBy
  socialCapitalScore: OrderBy
  socialCapitalRank: OrderBy
  farScore: OrderBy
  farRank: OrderBy
}

input SocialsInput {
  order: [SocialOrderBy!]
  filter: SocialFilter!
  blockchain: Blockchain!
  limit: Int
  cursor: String
}

input SocialsNestedInput {
  filter: SocialFilter
  blockchain: Blockchain
  limit: Int
}

type SocialsOutput {
  Social: [Social!]
  pageInfo: PageInfo
}

input String_Comparator_Exp {
  _eq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _ne: String
  _in: [String!]
  _nin: [String!]
}

input String_Eq_Comparator_Exp {
  _eq: String
}

input String_Eq_In_Comparator_Exp {
  _eq: String
  _in: [String!]
}

scalar Time

input Time_Comparator_Exp {
  _eq: Time
  _gt: Time
  _gte: Time
  _lt: Time
  _lte: Time
  _ne: Time
  _in: [Time!]
  _nin: [Time!]
}

input Time_Range_Comparator_Exp {
  _eq: Int
}

enum TimeFrame {
  one_hour
  two_hours
  eight_hours
  one_day
  two_days
  seven_days
}

scalar TimeRange

enum TokenType {
  ERC1155
  ERC721
  ERC20
}

input TokenType_Comparator_Exp {
  _eq: TokenType
  _in: [TokenType!]
}

input Trending_Comparator_Exp {
  _eq: Address
  _in: [Address!]
}

type TrendingCast {
  id: String
  hash: String
  fid: Int
  rootParentUrl: String
  criteriaCount: Float
  socialCapitalValueFormatted: Float
  socialCapitalValueRaw: String
  castValueFormatted: Float
  castValueRaw: String
  cast: FarcasterCast
  criteria: String
  timeFrom: Time
  timeTo: Time
  channel: FarcasterChannel
}

input TrendingCast_Int_Comparator_Exp {
  _eq: Int
}

input TrendingCastFilter {
  fid: TrendingCast_Int_Comparator_Exp
  rootParentUrl: String_Eq_Comparator_Exp
}

enum TrendingCastsCriteria {
  social_capital_value
  likes
  recasts
  replies
  likes_recasts_replies
}

input TrendingCastsInput {
  filter: TrendingCastFilter
  timeFrame: TrendingCastTimeFrame!
  blockchain: EveryBlockchain!
  criteria: TrendingCastsCriteria!
  limit: Int
  cursor: String
}

type TrendingCastsOutput {
  TrendingCast: [TrendingCast!]
  pageInfo: PageInfo
}

enum TrendingCastTimeFrame {
  one_hour
  two_hours
  four_hours
  eight_hours
  twelve_hours
  one_day
  two_days
  seven_days
}

input TrendingFilter {
  address: Trending_Comparator_Exp
}

type VideoVariants {
  original: String
}

type Wallet {
  """
  Blockchain address, ENS domain name, social identity such as Farcaster (for
  Farcaster use 'fc_fid:' prefix followed by the Farcaster user ID like
  fc_fid:5650, or use 'fc_fname:' prefix followed by the Farcaster user ID like
  'fc_fname:vbuterin')
  """
  identity: Identity!

  """Returns addresses associated with the identity input"""
  addresses: [Address!]

  """Nested query - allows returning primary domains, if applicable"""
  primaryDomain: Domain

  """Nested query - allows querying domains owned by the address"""
  domains(input: DomainsNestedInput): [Domain!]

  """Returns social profile information related to the address"""
  socials(input: SocialsNestedInput): [Social!]

  """Represent On-chain smart-contract accounts"""
  socialFollowings(input: SocialFollowingNestedInput): SocialFollowingOutput
  socialFollowers(input: SocialFollowerNestedInput): SocialFollowerOutput
}

input WalletInput {
  identity: Identity!
}

