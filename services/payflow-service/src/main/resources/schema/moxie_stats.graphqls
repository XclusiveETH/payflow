"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

enum Aggregation_interval {
  hour
  day
}

type Auction {
  """auctionid"""
  id: ID!

  """protocol token address"""
  protocolToken: Bytes!
  subjectToken: SubjectToken
  minFundingThreshold: BigInt!
  minFundingThresholdNotReached: Boolean!
  clearingUserId: BigInt!
  clearingBuyAmount: BigInt!
  clearingSellAmount: BigInt!
  volumeClearingPriceOrder: BigInt!

  """
  _bondingAmount + _protocolFee + _subjectFee -> from auction , should be added in summary buyVolume 
  """
  amountRaised: BigInt!
  subjectFee: BigInt!
  protocolFee: BigInt!
  startTxHash: Bytes!
  endTxHash: Bytes
  startBlockInfo: BlockInfo!
  endBlockInfo: BlockInfo
  auctionEndDate: BigInt!
}

input Auction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocolToken: Bytes
  protocolToken_not: Bytes
  protocolToken_gt: Bytes
  protocolToken_lt: Bytes
  protocolToken_gte: Bytes
  protocolToken_lte: Bytes
  protocolToken_in: [Bytes!]
  protocolToken_not_in: [Bytes!]
  protocolToken_contains: Bytes
  protocolToken_not_contains: Bytes
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  minFundingThreshold: BigInt
  minFundingThreshold_not: BigInt
  minFundingThreshold_gt: BigInt
  minFundingThreshold_lt: BigInt
  minFundingThreshold_gte: BigInt
  minFundingThreshold_lte: BigInt
  minFundingThreshold_in: [BigInt!]
  minFundingThreshold_not_in: [BigInt!]
  minFundingThresholdNotReached: Boolean
  minFundingThresholdNotReached_not: Boolean
  minFundingThresholdNotReached_in: [Boolean!]
  minFundingThresholdNotReached_not_in: [Boolean!]
  clearingUserId: BigInt
  clearingUserId_not: BigInt
  clearingUserId_gt: BigInt
  clearingUserId_lt: BigInt
  clearingUserId_gte: BigInt
  clearingUserId_lte: BigInt
  clearingUserId_in: [BigInt!]
  clearingUserId_not_in: [BigInt!]
  clearingBuyAmount: BigInt
  clearingBuyAmount_not: BigInt
  clearingBuyAmount_gt: BigInt
  clearingBuyAmount_lt: BigInt
  clearingBuyAmount_gte: BigInt
  clearingBuyAmount_lte: BigInt
  clearingBuyAmount_in: [BigInt!]
  clearingBuyAmount_not_in: [BigInt!]
  clearingSellAmount: BigInt
  clearingSellAmount_not: BigInt
  clearingSellAmount_gt: BigInt
  clearingSellAmount_lt: BigInt
  clearingSellAmount_gte: BigInt
  clearingSellAmount_lte: BigInt
  clearingSellAmount_in: [BigInt!]
  clearingSellAmount_not_in: [BigInt!]
  volumeClearingPriceOrder: BigInt
  volumeClearingPriceOrder_not: BigInt
  volumeClearingPriceOrder_gt: BigInt
  volumeClearingPriceOrder_lt: BigInt
  volumeClearingPriceOrder_gte: BigInt
  volumeClearingPriceOrder_lte: BigInt
  volumeClearingPriceOrder_in: [BigInt!]
  volumeClearingPriceOrder_not_in: [BigInt!]
  amountRaised: BigInt
  amountRaised_not: BigInt
  amountRaised_gt: BigInt
  amountRaised_lt: BigInt
  amountRaised_gte: BigInt
  amountRaised_lte: BigInt
  amountRaised_in: [BigInt!]
  amountRaised_not_in: [BigInt!]
  subjectFee: BigInt
  subjectFee_not: BigInt
  subjectFee_gt: BigInt
  subjectFee_lt: BigInt
  subjectFee_gte: BigInt
  subjectFee_lte: BigInt
  subjectFee_in: [BigInt!]
  subjectFee_not_in: [BigInt!]
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  startTxHash: Bytes
  startTxHash_not: Bytes
  startTxHash_gt: Bytes
  startTxHash_lt: Bytes
  startTxHash_gte: Bytes
  startTxHash_lte: Bytes
  startTxHash_in: [Bytes!]
  startTxHash_not_in: [Bytes!]
  startTxHash_contains: Bytes
  startTxHash_not_contains: Bytes
  endTxHash: Bytes
  endTxHash_not: Bytes
  endTxHash_gt: Bytes
  endTxHash_lt: Bytes
  endTxHash_gte: Bytes
  endTxHash_lte: Bytes
  endTxHash_in: [Bytes!]
  endTxHash_not_in: [Bytes!]
  endTxHash_contains: Bytes
  endTxHash_not_contains: Bytes
  startBlockInfo: String
  startBlockInfo_not: String
  startBlockInfo_gt: String
  startBlockInfo_lt: String
  startBlockInfo_gte: String
  startBlockInfo_lte: String
  startBlockInfo_in: [String!]
  startBlockInfo_not_in: [String!]
  startBlockInfo_contains: String
  startBlockInfo_contains_nocase: String
  startBlockInfo_not_contains: String
  startBlockInfo_not_contains_nocase: String
  startBlockInfo_starts_with: String
  startBlockInfo_starts_with_nocase: String
  startBlockInfo_not_starts_with: String
  startBlockInfo_not_starts_with_nocase: String
  startBlockInfo_ends_with: String
  startBlockInfo_ends_with_nocase: String
  startBlockInfo_not_ends_with: String
  startBlockInfo_not_ends_with_nocase: String
  startBlockInfo_: BlockInfo_filter
  endBlockInfo: String
  endBlockInfo_not: String
  endBlockInfo_gt: String
  endBlockInfo_lt: String
  endBlockInfo_gte: String
  endBlockInfo_lte: String
  endBlockInfo_in: [String!]
  endBlockInfo_not_in: [String!]
  endBlockInfo_contains: String
  endBlockInfo_contains_nocase: String
  endBlockInfo_not_contains: String
  endBlockInfo_not_contains_nocase: String
  endBlockInfo_starts_with: String
  endBlockInfo_starts_with_nocase: String
  endBlockInfo_not_starts_with: String
  endBlockInfo_not_starts_with_nocase: String
  endBlockInfo_ends_with: String
  endBlockInfo_ends_with_nocase: String
  endBlockInfo_not_ends_with: String
  endBlockInfo_not_ends_with_nocase: String
  endBlockInfo_: BlockInfo_filter
  auctionEndDate: BigInt
  auctionEndDate_not: BigInt
  auctionEndDate_gt: BigInt
  auctionEndDate_lt: BigInt
  auctionEndDate_gte: BigInt
  auctionEndDate_lte: BigInt
  auctionEndDate_in: [BigInt!]
  auctionEndDate_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Auction_filter]
  or: [Auction_filter]
}

enum Auction_orderBy {
  id
  protocolToken
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  minFundingThreshold
  minFundingThresholdNotReached
  clearingUserId
  clearingBuyAmount
  clearingSellAmount
  volumeClearingPriceOrder
  amountRaised
  subjectFee
  protocolFee
  startTxHash
  endTxHash
  startBlockInfo
  startBlockInfo__id
  startBlockInfo__hash
  startBlockInfo__blockNumber
  startBlockInfo__timestamp
  endBlockInfo
  endBlockInfo__id
  endBlockInfo__hash
  endBlockInfo__blockNumber
  endBlockInfo__timestamp
  auctionEndDate
}

type AuctionUser {
  id: ID!
  userAddress: Bytes!
}

input AuctionUser_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userAddress: Bytes
  userAddress_not: Bytes
  userAddress_gt: Bytes
  userAddress_lt: Bytes
  userAddress_gte: Bytes
  userAddress_lte: Bytes
  userAddress_in: [Bytes!]
  userAddress_not_in: [Bytes!]
  userAddress_contains: Bytes
  userAddress_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AuctionUser_filter]
  or: [AuctionUser_filter]
}

enum AuctionUser_orderBy {
  id
  userAddress
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

type BlockInfo {
  id: ID!
  hash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input BlockInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  hash: Bytes
  hash_not: Bytes
  hash_gt: Bytes
  hash_lt: Bytes
  hash_gte: Bytes
  hash_lte: Bytes
  hash_in: [Bytes!]
  hash_not_in: [Bytes!]
  hash_contains: Bytes
  hash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BlockInfo_filter]
  or: [BlockInfo_filter]
}

enum BlockInfo_orderBy {
  id
  hash
  blockNumber
  timestamp
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

enum OnboardingStatus {
  OnboardingInitialized
  OnboardingFinished
}

type Order {
  """txHash+-+logIndex"""
  id: ID!

  """Moxie Token address"""
  protocolToken: Bytes!

  """Amount of moxie token"""
  protocolTokenAmount: BigInt!

  """Subject Token address"""
  subjectToken: SubjectToken!

  """Amount of subject token"""
  subjectAmount: BigInt!

  """investment amount in moxie"""
  protocolTokenInvested: BigDecimal!

  """subject fee"""
  subjectFee: BigInt!

  """protocol fee"""
  protocolFee: BigInt!

  """Price of the subject token"""
  price: BigDecimal!

  """BUY/SELL order type"""
  orderType: OrderType

  """Seller/Buyer of Fan token"""
  user: User

  """associated portfolio"""
  portfolio: Portfolio!

  """subject fee transaction"""
  subjectFeeTransfer: SubjectFeeTransfer

  """protocol fee transaction"""
  protocolFeeTransfer: ProtocolFeeTransfer

  """block information"""
  blockInfo: BlockInfo!
}

input Order_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  protocolToken: Bytes
  protocolToken_not: Bytes
  protocolToken_gt: Bytes
  protocolToken_lt: Bytes
  protocolToken_gte: Bytes
  protocolToken_lte: Bytes
  protocolToken_in: [Bytes!]
  protocolToken_not_in: [Bytes!]
  protocolToken_contains: Bytes
  protocolToken_not_contains: Bytes
  protocolTokenAmount: BigInt
  protocolTokenAmount_not: BigInt
  protocolTokenAmount_gt: BigInt
  protocolTokenAmount_lt: BigInt
  protocolTokenAmount_gte: BigInt
  protocolTokenAmount_lte: BigInt
  protocolTokenAmount_in: [BigInt!]
  protocolTokenAmount_not_in: [BigInt!]
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  subjectAmount: BigInt
  subjectAmount_not: BigInt
  subjectAmount_gt: BigInt
  subjectAmount_lt: BigInt
  subjectAmount_gte: BigInt
  subjectAmount_lte: BigInt
  subjectAmount_in: [BigInt!]
  subjectAmount_not_in: [BigInt!]
  protocolTokenInvested: BigDecimal
  protocolTokenInvested_not: BigDecimal
  protocolTokenInvested_gt: BigDecimal
  protocolTokenInvested_lt: BigDecimal
  protocolTokenInvested_gte: BigDecimal
  protocolTokenInvested_lte: BigDecimal
  protocolTokenInvested_in: [BigDecimal!]
  protocolTokenInvested_not_in: [BigDecimal!]
  subjectFee: BigInt
  subjectFee_not: BigInt
  subjectFee_gt: BigInt
  subjectFee_lt: BigInt
  subjectFee_gte: BigInt
  subjectFee_lte: BigInt
  subjectFee_in: [BigInt!]
  subjectFee_not_in: [BigInt!]
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  orderType: OrderType
  orderType_not: OrderType
  orderType_in: [OrderType!]
  orderType_not_in: [OrderType!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  portfolio: String
  portfolio_not: String
  portfolio_gt: String
  portfolio_lt: String
  portfolio_gte: String
  portfolio_lte: String
  portfolio_in: [String!]
  portfolio_not_in: [String!]
  portfolio_contains: String
  portfolio_contains_nocase: String
  portfolio_not_contains: String
  portfolio_not_contains_nocase: String
  portfolio_starts_with: String
  portfolio_starts_with_nocase: String
  portfolio_not_starts_with: String
  portfolio_not_starts_with_nocase: String
  portfolio_ends_with: String
  portfolio_ends_with_nocase: String
  portfolio_not_ends_with: String
  portfolio_not_ends_with_nocase: String
  portfolio_: Portfolio_filter
  subjectFeeTransfer: String
  subjectFeeTransfer_not: String
  subjectFeeTransfer_gt: String
  subjectFeeTransfer_lt: String
  subjectFeeTransfer_gte: String
  subjectFeeTransfer_lte: String
  subjectFeeTransfer_in: [String!]
  subjectFeeTransfer_not_in: [String!]
  subjectFeeTransfer_contains: String
  subjectFeeTransfer_contains_nocase: String
  subjectFeeTransfer_not_contains: String
  subjectFeeTransfer_not_contains_nocase: String
  subjectFeeTransfer_starts_with: String
  subjectFeeTransfer_starts_with_nocase: String
  subjectFeeTransfer_not_starts_with: String
  subjectFeeTransfer_not_starts_with_nocase: String
  subjectFeeTransfer_ends_with: String
  subjectFeeTransfer_ends_with_nocase: String
  subjectFeeTransfer_not_ends_with: String
  subjectFeeTransfer_not_ends_with_nocase: String
  subjectFeeTransfer_: SubjectFeeTransfer_filter
  protocolFeeTransfer: String
  protocolFeeTransfer_not: String
  protocolFeeTransfer_gt: String
  protocolFeeTransfer_lt: String
  protocolFeeTransfer_gte: String
  protocolFeeTransfer_lte: String
  protocolFeeTransfer_in: [String!]
  protocolFeeTransfer_not_in: [String!]
  protocolFeeTransfer_contains: String
  protocolFeeTransfer_contains_nocase: String
  protocolFeeTransfer_not_contains: String
  protocolFeeTransfer_not_contains_nocase: String
  protocolFeeTransfer_starts_with: String
  protocolFeeTransfer_starts_with_nocase: String
  protocolFeeTransfer_not_starts_with: String
  protocolFeeTransfer_not_starts_with_nocase: String
  protocolFeeTransfer_ends_with: String
  protocolFeeTransfer_ends_with_nocase: String
  protocolFeeTransfer_not_ends_with: String
  protocolFeeTransfer_not_ends_with_nocase: String
  protocolFeeTransfer_: ProtocolFeeTransfer_filter
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Order_filter]
  or: [Order_filter]
}

enum Order_orderBy {
  id
  protocolToken
  protocolTokenAmount
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  subjectAmount
  protocolTokenInvested
  subjectFee
  protocolFee
  price
  orderType
  user
  user__id
  user__buyVolume
  user__sellVolume
  user__protocolTokenInvested
  user__protocolOrdersCount
  portfolio
  portfolio__id
  portfolio__balance
  portfolio__buyVolume
  portfolio__subjectTokenBuyVolume
  portfolio__sellVolume
  portfolio__protocolTokenInvested
  subjectFeeTransfer
  subjectFeeTransfer__id
  subjectFeeTransfer__txHash
  subjectFeeTransfer__amount
  protocolFeeTransfer
  protocolFeeTransfer__id
  protocolFeeTransfer__txHash
  protocolFeeTransfer__amount
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

enum OrderType {
  SELL
  BUY
  AUCTION
}

type Portfolio {
  """User's address+-+Subject's token address"""
  id: ID!

  """User's address"""
  user: User!

  """Subject's token address"""
  subjectToken: SubjectToken!

  """Net quantity of the subject token by the user"""
  balance: BigInt!

  """Moxie spent by user to buy the subject token(buyShare + auctionOrders)"""
  buyVolume: BigInt!

  """total subject token bought by user"""
  subjectTokenBuyVolume: BigInt!

  """amount of moxie earned by user by selling the subject token"""
  sellVolume: BigInt!

  """total moxie invested by the user"""
  protocolTokenInvested: BigDecimal!

  """Orders associated with the user's portfolio"""
  orders(skip: Int = 0, first: Int = 100, orderBy: Order_orderBy, orderDirection: OrderDirection, where: Order_filter): [Order!]!

  """created at block information"""
  createdAtBlockInfo: BlockInfo!

  """updated at block information"""
  updatedAtBlockInfo: BlockInfo!
}

input Portfolio_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  buyVolume: BigInt
  buyVolume_not: BigInt
  buyVolume_gt: BigInt
  buyVolume_lt: BigInt
  buyVolume_gte: BigInt
  buyVolume_lte: BigInt
  buyVolume_in: [BigInt!]
  buyVolume_not_in: [BigInt!]
  subjectTokenBuyVolume: BigInt
  subjectTokenBuyVolume_not: BigInt
  subjectTokenBuyVolume_gt: BigInt
  subjectTokenBuyVolume_lt: BigInt
  subjectTokenBuyVolume_gte: BigInt
  subjectTokenBuyVolume_lte: BigInt
  subjectTokenBuyVolume_in: [BigInt!]
  subjectTokenBuyVolume_not_in: [BigInt!]
  sellVolume: BigInt
  sellVolume_not: BigInt
  sellVolume_gt: BigInt
  sellVolume_lt: BigInt
  sellVolume_gte: BigInt
  sellVolume_lte: BigInt
  sellVolume_in: [BigInt!]
  sellVolume_not_in: [BigInt!]
  protocolTokenInvested: BigDecimal
  protocolTokenInvested_not: BigDecimal
  protocolTokenInvested_gt: BigDecimal
  protocolTokenInvested_lt: BigDecimal
  protocolTokenInvested_gte: BigDecimal
  protocolTokenInvested_lte: BigDecimal
  protocolTokenInvested_in: [BigDecimal!]
  protocolTokenInvested_not_in: [BigDecimal!]
  orders_: Order_filter
  createdAtBlockInfo: String
  createdAtBlockInfo_not: String
  createdAtBlockInfo_gt: String
  createdAtBlockInfo_lt: String
  createdAtBlockInfo_gte: String
  createdAtBlockInfo_lte: String
  createdAtBlockInfo_in: [String!]
  createdAtBlockInfo_not_in: [String!]
  createdAtBlockInfo_contains: String
  createdAtBlockInfo_contains_nocase: String
  createdAtBlockInfo_not_contains: String
  createdAtBlockInfo_not_contains_nocase: String
  createdAtBlockInfo_starts_with: String
  createdAtBlockInfo_starts_with_nocase: String
  createdAtBlockInfo_not_starts_with: String
  createdAtBlockInfo_not_starts_with_nocase: String
  createdAtBlockInfo_ends_with: String
  createdAtBlockInfo_ends_with_nocase: String
  createdAtBlockInfo_not_ends_with: String
  createdAtBlockInfo_not_ends_with_nocase: String
  createdAtBlockInfo_: BlockInfo_filter
  updatedAtBlockInfo: String
  updatedAtBlockInfo_not: String
  updatedAtBlockInfo_gt: String
  updatedAtBlockInfo_lt: String
  updatedAtBlockInfo_gte: String
  updatedAtBlockInfo_lte: String
  updatedAtBlockInfo_in: [String!]
  updatedAtBlockInfo_not_in: [String!]
  updatedAtBlockInfo_contains: String
  updatedAtBlockInfo_contains_nocase: String
  updatedAtBlockInfo_not_contains: String
  updatedAtBlockInfo_not_contains_nocase: String
  updatedAtBlockInfo_starts_with: String
  updatedAtBlockInfo_starts_with_nocase: String
  updatedAtBlockInfo_not_starts_with: String
  updatedAtBlockInfo_not_starts_with_nocase: String
  updatedAtBlockInfo_ends_with: String
  updatedAtBlockInfo_ends_with_nocase: String
  updatedAtBlockInfo_not_ends_with: String
  updatedAtBlockInfo_not_ends_with_nocase: String
  updatedAtBlockInfo_: BlockInfo_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Portfolio_filter]
  or: [Portfolio_filter]
}

enum Portfolio_orderBy {
  id
  user
  user__id
  user__buyVolume
  user__sellVolume
  user__protocolTokenInvested
  user__protocolOrdersCount
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  balance
  buyVolume
  subjectTokenBuyVolume
  sellVolume
  protocolTokenInvested
  orders
  createdAtBlockInfo
  createdAtBlockInfo__id
  createdAtBlockInfo__hash
  createdAtBlockInfo__blockNumber
  createdAtBlockInfo__timestamp
  updatedAtBlockInfo
  updatedAtBlockInfo__id
  updatedAtBlockInfo__hash
  updatedAtBlockInfo__blockNumber
  updatedAtBlockInfo__timestamp
}

type ProtocolFeeBeneficiary {
  """address of the beneficiary"""
  id: ID!

  """address of the beneficiary"""
  beneficiary: Bytes!

  """total fees collected by the protocol"""
  totalFees: BigInt!

  """protocol fee transfers"""
  protocolFeeTransfers(skip: Int = 0, first: Int = 100, orderBy: ProtocolFeeTransfer_orderBy, orderDirection: OrderDirection, where: ProtocolFeeTransfer_filter): [ProtocolFeeTransfer!]!
}

input ProtocolFeeBeneficiary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  beneficiary: Bytes
  beneficiary_not: Bytes
  beneficiary_gt: Bytes
  beneficiary_lt: Bytes
  beneficiary_gte: Bytes
  beneficiary_lte: Bytes
  beneficiary_in: [Bytes!]
  beneficiary_not_in: [Bytes!]
  beneficiary_contains: Bytes
  beneficiary_not_contains: Bytes
  totalFees: BigInt
  totalFees_not: BigInt
  totalFees_gt: BigInt
  totalFees_lt: BigInt
  totalFees_gte: BigInt
  totalFees_lte: BigInt
  totalFees_in: [BigInt!]
  totalFees_not_in: [BigInt!]
  protocolFeeTransfers_: ProtocolFeeTransfer_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtocolFeeBeneficiary_filter]
  or: [ProtocolFeeBeneficiary_filter]
}

enum ProtocolFeeBeneficiary_orderBy {
  id
  beneficiary
  totalFees
  protocolFeeTransfers
}

type ProtocolFeeTransfer {
  """txHash+-+logIndex"""
  id: ID!

  """txHash of the transaction"""
  txHash: Bytes!

  """block information"""
  blockInfo: BlockInfo!

  """order"""
  order: Order!

  """subject token address"""
  subjectToken: SubjectToken!

  """ProtocolFee Beneficiary"""
  beneficiary: ProtocolFeeBeneficiary!

  """amount of moxie transferred"""
  amount: BigInt!
}

input ProtocolFeeTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  order: String
  order_not: String
  order_gt: String
  order_lt: String
  order_gte: String
  order_lte: String
  order_in: [String!]
  order_not_in: [String!]
  order_contains: String
  order_contains_nocase: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  order_: Order_filter
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  beneficiary: String
  beneficiary_not: String
  beneficiary_gt: String
  beneficiary_lt: String
  beneficiary_gte: String
  beneficiary_lte: String
  beneficiary_in: [String!]
  beneficiary_not_in: [String!]
  beneficiary_contains: String
  beneficiary_contains_nocase: String
  beneficiary_not_contains: String
  beneficiary_not_contains_nocase: String
  beneficiary_starts_with: String
  beneficiary_starts_with_nocase: String
  beneficiary_not_starts_with: String
  beneficiary_not_starts_with_nocase: String
  beneficiary_ends_with: String
  beneficiary_ends_with_nocase: String
  beneficiary_not_ends_with: String
  beneficiary_not_ends_with_nocase: String
  beneficiary_: ProtocolFeeBeneficiary_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ProtocolFeeTransfer_filter]
  or: [ProtocolFeeTransfer_filter]
}

enum ProtocolFeeTransfer_orderBy {
  id
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  order
  order__id
  order__protocolToken
  order__protocolTokenAmount
  order__subjectAmount
  order__protocolTokenInvested
  order__subjectFee
  order__protocolFee
  order__price
  order__orderType
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  beneficiary
  beneficiary__id
  beneficiary__beneficiary
  beneficiary__totalFees
  amount
}

type Query {
  blockInfo(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BlockInfo
  blockInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: BlockInfo_orderBy
    orderDirection: OrderDirection
    where: BlockInfo_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BlockInfo!]!
  subjectTokenRollingDailySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectTokenRollingDailySnapshot
  subjectTokenRollingDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectTokenRollingDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: SubjectTokenRollingDailySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectTokenRollingDailySnapshot!]!
  subjectTokenDailySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectTokenDailySnapshot
  subjectTokenDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectTokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: SubjectTokenDailySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectTokenDailySnapshot!]!
  subjectTokenHourlySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectTokenHourlySnapshot
  subjectTokenHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectTokenHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: SubjectTokenHourlySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectTokenHourlySnapshot!]!
  subjectToken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectToken
  subjectTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectToken_orderBy
    orderDirection: OrderDirection
    where: SubjectToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectToken!]!
  auction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  portfolio(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Portfolio
  portfolios(
    skip: Int = 0
    first: Int = 100
    orderBy: Portfolio_orderBy
    orderDirection: OrderDirection
    where: Portfolio_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Portfolio!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  order(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  protocolFeeBeneficiary(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolFeeBeneficiary
  protocolFeeBeneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolFeeBeneficiary_orderBy
    orderDirection: OrderDirection
    where: ProtocolFeeBeneficiary_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolFeeBeneficiary!]!
  protocolFeeTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolFeeTransfer
  protocolFeeTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolFeeTransfer_orderBy
    orderDirection: OrderDirection
    where: ProtocolFeeTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolFeeTransfer!]!
  subjectFeeTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectFeeTransfer
  subjectFeeTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectFeeTransfer_orderBy
    orderDirection: OrderDirection
    where: SubjectFeeTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectFeeTransfer!]!
  summary(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Summary
  summaries(
    skip: Int = 0
    first: Int = 100
    orderBy: Summary_orderBy
    orderDirection: OrderDirection
    where: Summary_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Summary!]!
  auctionUser(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionUser
  auctionUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionUser_orderBy
    orderDirection: OrderDirection
    where: AuctionUser_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionUser!]!
  vaultDepositTx(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultDepositTx
  vaultDepositTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultDepositTx_orderBy
    orderDirection: OrderDirection
    where: VaultDepositTx_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultDepositTx!]!
  vaultTransferTx(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultTransferTx
  vaultTransferTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultTransferTx_orderBy
    orderDirection: OrderDirection
    where: VaultTransferTx_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultTransferTx!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SubjectFeeTransfer {
  """txHash"""
  id: ID!

  """txHash of the transaction"""
  txHash: Bytes!

  """block information"""
  blockInfo: BlockInfo!

  """order"""
  order: Order!

  """subject token address"""
  subjectToken: SubjectToken!

  """address of the beneficiary"""
  subject: User!

  """amount of moxie transferred"""
  amount: BigInt!
}

input SubjectFeeTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter
  order: String
  order_not: String
  order_gt: String
  order_lt: String
  order_gte: String
  order_lte: String
  order_in: [String!]
  order_not_in: [String!]
  order_contains: String
  order_contains_nocase: String
  order_not_contains: String
  order_not_contains_nocase: String
  order_starts_with: String
  order_starts_with_nocase: String
  order_not_starts_with: String
  order_not_starts_with_nocase: String
  order_ends_with: String
  order_ends_with_nocase: String
  order_not_ends_with: String
  order_not_ends_with_nocase: String
  order_: Order_filter
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubjectFeeTransfer_filter]
  or: [SubjectFeeTransfer_filter]
}

enum SubjectFeeTransfer_orderBy {
  id
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
  order
  order__id
  order__protocolToken
  order__protocolTokenAmount
  order__subjectAmount
  order__protocolTokenInvested
  order__subjectFee
  order__protocolFee
  order__price
  order__orderType
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  subject
  subject__id
  subject__buyVolume
  subject__sellVolume
  subject__protocolTokenInvested
  subject__protocolOrdersCount
  amount
}

type SubjectToken {
  """address of the subject token"""
  id: ID!

  """name of the token"""
  name: String!

  """symbol of the token"""
  symbol: String!

  """decimals of the token"""
  decimals: BigInt!

  """address of the beneficiary"""
  subject: User

  """reserve balance in vault"""
  reserve: BigInt!

  """current price of the token in Moxie"""
  currentPriceInMoxie: BigDecimal!

  """current price of the token in Moxie in wei unit"""
  currentPriceInWeiInMoxie: BigDecimal!

  """constant used to calculate bonding curve"""
  reserveRatio: BigInt!

  """Total supply of the token"""
  totalSupply: BigInt!

  """initial supply when bonding curve is initialized"""
  initialSupply: BigInt!

  """total number of unique holders"""
  uniqueHolders: BigInt!

  """amount of moxie used to buy or sell or auction this subject token"""
  lifetimeVolume: BigInt!

  """snapshots"""
  hourlySnapshots(skip: Int = 0, first: Int = 100, orderBy: SubjectTokenHourlySnapshot_orderBy, orderDirection: OrderDirection, where: SubjectTokenHourlySnapshot_filter): [SubjectTokenHourlySnapshot!]!
  dailySnapshots(skip: Int = 0, first: Int = 100, orderBy: SubjectTokenDailySnapshot_orderBy, orderDirection: OrderDirection, where: SubjectTokenDailySnapshot_filter): [SubjectTokenDailySnapshot!]!
  latestRollingDailySnapshot: SubjectTokenRollingDailySnapshot
  latestDailySnapshot: SubjectTokenDailySnapshot
  previousDailySnapshot: SubjectTokenDailySnapshot

  """total beneficiary fees collected"""
  subjectFee: BigInt!

  """total protocol fees collected"""
  protocolFee: BigInt!

  """beneficiary fee transfer"""
  subjectFeeTransfers(skip: Int = 0, first: Int = 100, orderBy: SubjectFeeTransfer_orderBy, orderDirection: OrderDirection, where: SubjectFeeTransfer_filter): [SubjectFeeTransfer!]!

  """protocol fee transfers"""
  protocolFeeTransfers(skip: Int = 0, first: Int = 100, orderBy: ProtocolFeeTransfer_orderBy, orderDirection: OrderDirection, where: ProtocolFeeTransfer_filter): [ProtocolFeeTransfer!]!

  """portfolios with this subject"""
  portfolio(skip: Int = 0, first: Int = 100, orderBy: Portfolio_orderBy, orderDirection: OrderDirection, where: Portfolio_filter): [Portfolio!]!

  """created at block information"""
  createdAtBlockInfo: BlockInfo!

  """updated at block information"""
  updatedAtBlockInfo: BlockInfo!

  """Moxie spent by all users buy this subject token"""
  buySideVolume: BigInt!

  """Moxie earned by all user to sell the subject token"""
  sellSideVolume: BigInt!

  """
  total moxie invested by the user, after reducing when user sells the token
  """
  protocolTokenInvested: BigDecimal!

  """orders associated with the subject"""
  orders(skip: Int = 0, first: Int = 100, orderBy: Order_orderBy, orderDirection: OrderDirection, where: Order_filter): [Order!]!
  auction: Auction
  status: OnboardingStatus!
}

input SubjectToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: BigInt
  decimals_not: BigInt
  decimals_gt: BigInt
  decimals_lt: BigInt
  decimals_gte: BigInt
  decimals_lte: BigInt
  decimals_in: [BigInt!]
  decimals_not_in: [BigInt!]
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: User_filter
  reserve: BigInt
  reserve_not: BigInt
  reserve_gt: BigInt
  reserve_lt: BigInt
  reserve_gte: BigInt
  reserve_lte: BigInt
  reserve_in: [BigInt!]
  reserve_not_in: [BigInt!]
  currentPriceInMoxie: BigDecimal
  currentPriceInMoxie_not: BigDecimal
  currentPriceInMoxie_gt: BigDecimal
  currentPriceInMoxie_lt: BigDecimal
  currentPriceInMoxie_gte: BigDecimal
  currentPriceInMoxie_lte: BigDecimal
  currentPriceInMoxie_in: [BigDecimal!]
  currentPriceInMoxie_not_in: [BigDecimal!]
  currentPriceInWeiInMoxie: BigDecimal
  currentPriceInWeiInMoxie_not: BigDecimal
  currentPriceInWeiInMoxie_gt: BigDecimal
  currentPriceInWeiInMoxie_lt: BigDecimal
  currentPriceInWeiInMoxie_gte: BigDecimal
  currentPriceInWeiInMoxie_lte: BigDecimal
  currentPriceInWeiInMoxie_in: [BigDecimal!]
  currentPriceInWeiInMoxie_not_in: [BigDecimal!]
  reserveRatio: BigInt
  reserveRatio_not: BigInt
  reserveRatio_gt: BigInt
  reserveRatio_lt: BigInt
  reserveRatio_gte: BigInt
  reserveRatio_lte: BigInt
  reserveRatio_in: [BigInt!]
  reserveRatio_not_in: [BigInt!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  initialSupply: BigInt
  initialSupply_not: BigInt
  initialSupply_gt: BigInt
  initialSupply_lt: BigInt
  initialSupply_gte: BigInt
  initialSupply_lte: BigInt
  initialSupply_in: [BigInt!]
  initialSupply_not_in: [BigInt!]
  uniqueHolders: BigInt
  uniqueHolders_not: BigInt
  uniqueHolders_gt: BigInt
  uniqueHolders_lt: BigInt
  uniqueHolders_gte: BigInt
  uniqueHolders_lte: BigInt
  uniqueHolders_in: [BigInt!]
  uniqueHolders_not_in: [BigInt!]
  lifetimeVolume: BigInt
  lifetimeVolume_not: BigInt
  lifetimeVolume_gt: BigInt
  lifetimeVolume_lt: BigInt
  lifetimeVolume_gte: BigInt
  lifetimeVolume_lte: BigInt
  lifetimeVolume_in: [BigInt!]
  lifetimeVolume_not_in: [BigInt!]
  hourlySnapshots_: SubjectTokenHourlySnapshot_filter
  dailySnapshots_: SubjectTokenDailySnapshot_filter
  latestRollingDailySnapshot: String
  latestRollingDailySnapshot_not: String
  latestRollingDailySnapshot_gt: String
  latestRollingDailySnapshot_lt: String
  latestRollingDailySnapshot_gte: String
  latestRollingDailySnapshot_lte: String
  latestRollingDailySnapshot_in: [String!]
  latestRollingDailySnapshot_not_in: [String!]
  latestRollingDailySnapshot_contains: String
  latestRollingDailySnapshot_contains_nocase: String
  latestRollingDailySnapshot_not_contains: String
  latestRollingDailySnapshot_not_contains_nocase: String
  latestRollingDailySnapshot_starts_with: String
  latestRollingDailySnapshot_starts_with_nocase: String
  latestRollingDailySnapshot_not_starts_with: String
  latestRollingDailySnapshot_not_starts_with_nocase: String
  latestRollingDailySnapshot_ends_with: String
  latestRollingDailySnapshot_ends_with_nocase: String
  latestRollingDailySnapshot_not_ends_with: String
  latestRollingDailySnapshot_not_ends_with_nocase: String
  latestRollingDailySnapshot_: SubjectTokenRollingDailySnapshot_filter
  latestDailySnapshot: String
  latestDailySnapshot_not: String
  latestDailySnapshot_gt: String
  latestDailySnapshot_lt: String
  latestDailySnapshot_gte: String
  latestDailySnapshot_lte: String
  latestDailySnapshot_in: [String!]
  latestDailySnapshot_not_in: [String!]
  latestDailySnapshot_contains: String
  latestDailySnapshot_contains_nocase: String
  latestDailySnapshot_not_contains: String
  latestDailySnapshot_not_contains_nocase: String
  latestDailySnapshot_starts_with: String
  latestDailySnapshot_starts_with_nocase: String
  latestDailySnapshot_not_starts_with: String
  latestDailySnapshot_not_starts_with_nocase: String
  latestDailySnapshot_ends_with: String
  latestDailySnapshot_ends_with_nocase: String
  latestDailySnapshot_not_ends_with: String
  latestDailySnapshot_not_ends_with_nocase: String
  latestDailySnapshot_: SubjectTokenDailySnapshot_filter
  previousDailySnapshot: String
  previousDailySnapshot_not: String
  previousDailySnapshot_gt: String
  previousDailySnapshot_lt: String
  previousDailySnapshot_gte: String
  previousDailySnapshot_lte: String
  previousDailySnapshot_in: [String!]
  previousDailySnapshot_not_in: [String!]
  previousDailySnapshot_contains: String
  previousDailySnapshot_contains_nocase: String
  previousDailySnapshot_not_contains: String
  previousDailySnapshot_not_contains_nocase: String
  previousDailySnapshot_starts_with: String
  previousDailySnapshot_starts_with_nocase: String
  previousDailySnapshot_not_starts_with: String
  previousDailySnapshot_not_starts_with_nocase: String
  previousDailySnapshot_ends_with: String
  previousDailySnapshot_ends_with_nocase: String
  previousDailySnapshot_not_ends_with: String
  previousDailySnapshot_not_ends_with_nocase: String
  previousDailySnapshot_: SubjectTokenDailySnapshot_filter
  subjectFee: BigInt
  subjectFee_not: BigInt
  subjectFee_gt: BigInt
  subjectFee_lt: BigInt
  subjectFee_gte: BigInt
  subjectFee_lte: BigInt
  subjectFee_in: [BigInt!]
  subjectFee_not_in: [BigInt!]
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  subjectFeeTransfers_: SubjectFeeTransfer_filter
  protocolFeeTransfers_: ProtocolFeeTransfer_filter
  portfolio_: Portfolio_filter
  createdAtBlockInfo: String
  createdAtBlockInfo_not: String
  createdAtBlockInfo_gt: String
  createdAtBlockInfo_lt: String
  createdAtBlockInfo_gte: String
  createdAtBlockInfo_lte: String
  createdAtBlockInfo_in: [String!]
  createdAtBlockInfo_not_in: [String!]
  createdAtBlockInfo_contains: String
  createdAtBlockInfo_contains_nocase: String
  createdAtBlockInfo_not_contains: String
  createdAtBlockInfo_not_contains_nocase: String
  createdAtBlockInfo_starts_with: String
  createdAtBlockInfo_starts_with_nocase: String
  createdAtBlockInfo_not_starts_with: String
  createdAtBlockInfo_not_starts_with_nocase: String
  createdAtBlockInfo_ends_with: String
  createdAtBlockInfo_ends_with_nocase: String
  createdAtBlockInfo_not_ends_with: String
  createdAtBlockInfo_not_ends_with_nocase: String
  createdAtBlockInfo_: BlockInfo_filter
  updatedAtBlockInfo: String
  updatedAtBlockInfo_not: String
  updatedAtBlockInfo_gt: String
  updatedAtBlockInfo_lt: String
  updatedAtBlockInfo_gte: String
  updatedAtBlockInfo_lte: String
  updatedAtBlockInfo_in: [String!]
  updatedAtBlockInfo_not_in: [String!]
  updatedAtBlockInfo_contains: String
  updatedAtBlockInfo_contains_nocase: String
  updatedAtBlockInfo_not_contains: String
  updatedAtBlockInfo_not_contains_nocase: String
  updatedAtBlockInfo_starts_with: String
  updatedAtBlockInfo_starts_with_nocase: String
  updatedAtBlockInfo_not_starts_with: String
  updatedAtBlockInfo_not_starts_with_nocase: String
  updatedAtBlockInfo_ends_with: String
  updatedAtBlockInfo_ends_with_nocase: String
  updatedAtBlockInfo_not_ends_with: String
  updatedAtBlockInfo_not_ends_with_nocase: String
  updatedAtBlockInfo_: BlockInfo_filter
  buySideVolume: BigInt
  buySideVolume_not: BigInt
  buySideVolume_gt: BigInt
  buySideVolume_lt: BigInt
  buySideVolume_gte: BigInt
  buySideVolume_lte: BigInt
  buySideVolume_in: [BigInt!]
  buySideVolume_not_in: [BigInt!]
  sellSideVolume: BigInt
  sellSideVolume_not: BigInt
  sellSideVolume_gt: BigInt
  sellSideVolume_lt: BigInt
  sellSideVolume_gte: BigInt
  sellSideVolume_lte: BigInt
  sellSideVolume_in: [BigInt!]
  sellSideVolume_not_in: [BigInt!]
  protocolTokenInvested: BigDecimal
  protocolTokenInvested_not: BigDecimal
  protocolTokenInvested_gt: BigDecimal
  protocolTokenInvested_lt: BigDecimal
  protocolTokenInvested_gte: BigDecimal
  protocolTokenInvested_lte: BigDecimal
  protocolTokenInvested_in: [BigDecimal!]
  protocolTokenInvested_not_in: [BigDecimal!]
  orders_: Order_filter
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: Auction_filter
  status: OnboardingStatus
  status_not: OnboardingStatus
  status_in: [OnboardingStatus!]
  status_not_in: [OnboardingStatus!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubjectToken_filter]
  or: [SubjectToken_filter]
}

enum SubjectToken_orderBy {
  id
  name
  symbol
  decimals
  subject
  subject__id
  subject__buyVolume
  subject__sellVolume
  subject__protocolTokenInvested
  subject__protocolOrdersCount
  reserve
  currentPriceInMoxie
  currentPriceInWeiInMoxie
  reserveRatio
  totalSupply
  initialSupply
  uniqueHolders
  lifetimeVolume
  hourlySnapshots
  dailySnapshots
  latestRollingDailySnapshot
  latestRollingDailySnapshot__id
  latestRollingDailySnapshot__startTimestamp
  latestRollingDailySnapshot__endTimestamp
  latestRollingDailySnapshot__startReferenceTimestamp
  latestRollingDailySnapshot__reserve
  latestRollingDailySnapshot__startPrice
  latestRollingDailySnapshot__endPrice
  latestRollingDailySnapshot__dailyPriceChange
  latestRollingDailySnapshot__totalSupply
  latestRollingDailySnapshot__startUniqueHolders
  latestRollingDailySnapshot__endUniqueHolders
  latestRollingDailySnapshot__dailyUniqueHoldersChange
  latestRollingDailySnapshot__startVolume
  latestRollingDailySnapshot__endVolume
  latestRollingDailySnapshot__dailyVolumeChange
  latestRollingDailySnapshot__startSubjectFee
  latestRollingDailySnapshot__endSubjectFee
  latestRollingDailySnapshot__dailySubjectFeeChange
  latestRollingDailySnapshot__startProtocolFee
  latestRollingDailySnapshot__endProtocolFee
  latestRollingDailySnapshot__dailyProtocolFeeChange
  latestDailySnapshot
  latestDailySnapshot__id
  latestDailySnapshot__startTimestamp
  latestDailySnapshot__endTimestamp
  latestDailySnapshot__reserve
  latestDailySnapshot__startPrice
  latestDailySnapshot__endPrice
  latestDailySnapshot__dailyPriceChange
  latestDailySnapshot__totalSupply
  latestDailySnapshot__startUniqueHolders
  latestDailySnapshot__endUniqueHolders
  latestDailySnapshot__dailyUniqueHoldersChange
  latestDailySnapshot__startVolume
  latestDailySnapshot__endVolume
  latestDailySnapshot__dailyVolumeChange
  latestDailySnapshot__startSubjectFee
  latestDailySnapshot__endSubjectFee
  latestDailySnapshot__dailySubjectFeeChange
  latestDailySnapshot__startProtocolFee
  latestDailySnapshot__endProtocolFee
  latestDailySnapshot__dailyProtocolFeeChange
  previousDailySnapshot
  previousDailySnapshot__id
  previousDailySnapshot__startTimestamp
  previousDailySnapshot__endTimestamp
  previousDailySnapshot__reserve
  previousDailySnapshot__startPrice
  previousDailySnapshot__endPrice
  previousDailySnapshot__dailyPriceChange
  previousDailySnapshot__totalSupply
  previousDailySnapshot__startUniqueHolders
  previousDailySnapshot__endUniqueHolders
  previousDailySnapshot__dailyUniqueHoldersChange
  previousDailySnapshot__startVolume
  previousDailySnapshot__endVolume
  previousDailySnapshot__dailyVolumeChange
  previousDailySnapshot__startSubjectFee
  previousDailySnapshot__endSubjectFee
  previousDailySnapshot__dailySubjectFeeChange
  previousDailySnapshot__startProtocolFee
  previousDailySnapshot__endProtocolFee
  previousDailySnapshot__dailyProtocolFeeChange
  subjectFee
  protocolFee
  subjectFeeTransfers
  protocolFeeTransfers
  portfolio
  createdAtBlockInfo
  createdAtBlockInfo__id
  createdAtBlockInfo__hash
  createdAtBlockInfo__blockNumber
  createdAtBlockInfo__timestamp
  updatedAtBlockInfo
  updatedAtBlockInfo__id
  updatedAtBlockInfo__hash
  updatedAtBlockInfo__blockNumber
  updatedAtBlockInfo__timestamp
  buySideVolume
  sellSideVolume
  protocolTokenInvested
  orders
  auction
  auction__id
  auction__protocolToken
  auction__minFundingThreshold
  auction__minFundingThresholdNotReached
  auction__clearingUserId
  auction__clearingBuyAmount
  auction__clearingSellAmount
  auction__volumeClearingPriceOrder
  auction__amountRaised
  auction__subjectFee
  auction__protocolFee
  auction__startTxHash
  auction__endTxHash
  auction__auctionEndDate
  status
}

type SubjectTokenDailySnapshot {
  """subjectId+-+endTimestamp"""
  id: ID!

  """start block timestamp"""
  startTimestamp: BigInt!

  """end block timestamp"""
  endTimestamp: BigInt!

  """subject token address"""
  subjectToken: SubjectToken!

  """address of the beneficiary"""
  subject: User

  """reserve balance (moxie)/ total locked value"""
  reserve: BigInt!

  """price of the token at the start of the snapshot"""
  startPrice: BigDecimal!

  """price of the token at the end of the snapshot"""
  endPrice: BigDecimal!

  """daily price change"""
  dailyPriceChange: BigDecimal!

  """Total supply of the token"""
  totalSupply: BigInt!

  """total number of unique holders at start of the snapshot"""
  startUniqueHolders: BigInt!

  """total number of unique holders at end of the snapshot"""
  endUniqueHolders: BigInt!

  """daily unique holders change"""
  dailyUniqueHoldersChange: BigInt!

  """
  amount of moxie used to buy or sell this subject token at start of the snapshot
  """
  startVolume: BigInt!

  """
  amount of moxie used to buy or sell this subject token at end of the snapshot
  """
  endVolume: BigInt!

  """daily volume change"""
  dailyVolumeChange: BigInt!

  """total beneficiary fee at start of the snapshot"""
  startSubjectFee: BigInt!

  """total beneficiary fee at end of the snapshot"""
  endSubjectFee: BigInt!

  """daily beneficiary fee change"""
  dailySubjectFeeChange: BigInt!

  """total protocol fee at start of the snapshot"""
  startProtocolFee: BigInt!

  """total protocol fee at end of the snapshot"""
  endProtocolFee: BigInt!

  """daily protocol fee change"""
  dailyProtocolFeeChange: BigInt!
  createdAtBlockInfo: BlockInfo!
  updatedAtBlockInfo: BlockInfo!
  lastSubjectTokenDailySnapshot: SubjectTokenDailySnapshot
  hourlySnapshotEndTimestamps: [BigInt!]!
}

input SubjectTokenDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: User_filter
  reserve: BigInt
  reserve_not: BigInt
  reserve_gt: BigInt
  reserve_lt: BigInt
  reserve_gte: BigInt
  reserve_lte: BigInt
  reserve_in: [BigInt!]
  reserve_not_in: [BigInt!]
  startPrice: BigDecimal
  startPrice_not: BigDecimal
  startPrice_gt: BigDecimal
  startPrice_lt: BigDecimal
  startPrice_gte: BigDecimal
  startPrice_lte: BigDecimal
  startPrice_in: [BigDecimal!]
  startPrice_not_in: [BigDecimal!]
  endPrice: BigDecimal
  endPrice_not: BigDecimal
  endPrice_gt: BigDecimal
  endPrice_lt: BigDecimal
  endPrice_gte: BigDecimal
  endPrice_lte: BigDecimal
  endPrice_in: [BigDecimal!]
  endPrice_not_in: [BigDecimal!]
  dailyPriceChange: BigDecimal
  dailyPriceChange_not: BigDecimal
  dailyPriceChange_gt: BigDecimal
  dailyPriceChange_lt: BigDecimal
  dailyPriceChange_gte: BigDecimal
  dailyPriceChange_lte: BigDecimal
  dailyPriceChange_in: [BigDecimal!]
  dailyPriceChange_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  startUniqueHolders: BigInt
  startUniqueHolders_not: BigInt
  startUniqueHolders_gt: BigInt
  startUniqueHolders_lt: BigInt
  startUniqueHolders_gte: BigInt
  startUniqueHolders_lte: BigInt
  startUniqueHolders_in: [BigInt!]
  startUniqueHolders_not_in: [BigInt!]
  endUniqueHolders: BigInt
  endUniqueHolders_not: BigInt
  endUniqueHolders_gt: BigInt
  endUniqueHolders_lt: BigInt
  endUniqueHolders_gte: BigInt
  endUniqueHolders_lte: BigInt
  endUniqueHolders_in: [BigInt!]
  endUniqueHolders_not_in: [BigInt!]
  dailyUniqueHoldersChange: BigInt
  dailyUniqueHoldersChange_not: BigInt
  dailyUniqueHoldersChange_gt: BigInt
  dailyUniqueHoldersChange_lt: BigInt
  dailyUniqueHoldersChange_gte: BigInt
  dailyUniqueHoldersChange_lte: BigInt
  dailyUniqueHoldersChange_in: [BigInt!]
  dailyUniqueHoldersChange_not_in: [BigInt!]
  startVolume: BigInt
  startVolume_not: BigInt
  startVolume_gt: BigInt
  startVolume_lt: BigInt
  startVolume_gte: BigInt
  startVolume_lte: BigInt
  startVolume_in: [BigInt!]
  startVolume_not_in: [BigInt!]
  endVolume: BigInt
  endVolume_not: BigInt
  endVolume_gt: BigInt
  endVolume_lt: BigInt
  endVolume_gte: BigInt
  endVolume_lte: BigInt
  endVolume_in: [BigInt!]
  endVolume_not_in: [BigInt!]
  dailyVolumeChange: BigInt
  dailyVolumeChange_not: BigInt
  dailyVolumeChange_gt: BigInt
  dailyVolumeChange_lt: BigInt
  dailyVolumeChange_gte: BigInt
  dailyVolumeChange_lte: BigInt
  dailyVolumeChange_in: [BigInt!]
  dailyVolumeChange_not_in: [BigInt!]
  startSubjectFee: BigInt
  startSubjectFee_not: BigInt
  startSubjectFee_gt: BigInt
  startSubjectFee_lt: BigInt
  startSubjectFee_gte: BigInt
  startSubjectFee_lte: BigInt
  startSubjectFee_in: [BigInt!]
  startSubjectFee_not_in: [BigInt!]
  endSubjectFee: BigInt
  endSubjectFee_not: BigInt
  endSubjectFee_gt: BigInt
  endSubjectFee_lt: BigInt
  endSubjectFee_gte: BigInt
  endSubjectFee_lte: BigInt
  endSubjectFee_in: [BigInt!]
  endSubjectFee_not_in: [BigInt!]
  dailySubjectFeeChange: BigInt
  dailySubjectFeeChange_not: BigInt
  dailySubjectFeeChange_gt: BigInt
  dailySubjectFeeChange_lt: BigInt
  dailySubjectFeeChange_gte: BigInt
  dailySubjectFeeChange_lte: BigInt
  dailySubjectFeeChange_in: [BigInt!]
  dailySubjectFeeChange_not_in: [BigInt!]
  startProtocolFee: BigInt
  startProtocolFee_not: BigInt
  startProtocolFee_gt: BigInt
  startProtocolFee_lt: BigInt
  startProtocolFee_gte: BigInt
  startProtocolFee_lte: BigInt
  startProtocolFee_in: [BigInt!]
  startProtocolFee_not_in: [BigInt!]
  endProtocolFee: BigInt
  endProtocolFee_not: BigInt
  endProtocolFee_gt: BigInt
  endProtocolFee_lt: BigInt
  endProtocolFee_gte: BigInt
  endProtocolFee_lte: BigInt
  endProtocolFee_in: [BigInt!]
  endProtocolFee_not_in: [BigInt!]
  dailyProtocolFeeChange: BigInt
  dailyProtocolFeeChange_not: BigInt
  dailyProtocolFeeChange_gt: BigInt
  dailyProtocolFeeChange_lt: BigInt
  dailyProtocolFeeChange_gte: BigInt
  dailyProtocolFeeChange_lte: BigInt
  dailyProtocolFeeChange_in: [BigInt!]
  dailyProtocolFeeChange_not_in: [BigInt!]
  createdAtBlockInfo: String
  createdAtBlockInfo_not: String
  createdAtBlockInfo_gt: String
  createdAtBlockInfo_lt: String
  createdAtBlockInfo_gte: String
  createdAtBlockInfo_lte: String
  createdAtBlockInfo_in: [String!]
  createdAtBlockInfo_not_in: [String!]
  createdAtBlockInfo_contains: String
  createdAtBlockInfo_contains_nocase: String
  createdAtBlockInfo_not_contains: String
  createdAtBlockInfo_not_contains_nocase: String
  createdAtBlockInfo_starts_with: String
  createdAtBlockInfo_starts_with_nocase: String
  createdAtBlockInfo_not_starts_with: String
  createdAtBlockInfo_not_starts_with_nocase: String
  createdAtBlockInfo_ends_with: String
  createdAtBlockInfo_ends_with_nocase: String
  createdAtBlockInfo_not_ends_with: String
  createdAtBlockInfo_not_ends_with_nocase: String
  createdAtBlockInfo_: BlockInfo_filter
  updatedAtBlockInfo: String
  updatedAtBlockInfo_not: String
  updatedAtBlockInfo_gt: String
  updatedAtBlockInfo_lt: String
  updatedAtBlockInfo_gte: String
  updatedAtBlockInfo_lte: String
  updatedAtBlockInfo_in: [String!]
  updatedAtBlockInfo_not_in: [String!]
  updatedAtBlockInfo_contains: String
  updatedAtBlockInfo_contains_nocase: String
  updatedAtBlockInfo_not_contains: String
  updatedAtBlockInfo_not_contains_nocase: String
  updatedAtBlockInfo_starts_with: String
  updatedAtBlockInfo_starts_with_nocase: String
  updatedAtBlockInfo_not_starts_with: String
  updatedAtBlockInfo_not_starts_with_nocase: String
  updatedAtBlockInfo_ends_with: String
  updatedAtBlockInfo_ends_with_nocase: String
  updatedAtBlockInfo_not_ends_with: String
  updatedAtBlockInfo_not_ends_with_nocase: String
  updatedAtBlockInfo_: BlockInfo_filter
  lastSubjectTokenDailySnapshot: String
  lastSubjectTokenDailySnapshot_not: String
  lastSubjectTokenDailySnapshot_gt: String
  lastSubjectTokenDailySnapshot_lt: String
  lastSubjectTokenDailySnapshot_gte: String
  lastSubjectTokenDailySnapshot_lte: String
  lastSubjectTokenDailySnapshot_in: [String!]
  lastSubjectTokenDailySnapshot_not_in: [String!]
  lastSubjectTokenDailySnapshot_contains: String
  lastSubjectTokenDailySnapshot_contains_nocase: String
  lastSubjectTokenDailySnapshot_not_contains: String
  lastSubjectTokenDailySnapshot_not_contains_nocase: String
  lastSubjectTokenDailySnapshot_starts_with: String
  lastSubjectTokenDailySnapshot_starts_with_nocase: String
  lastSubjectTokenDailySnapshot_not_starts_with: String
  lastSubjectTokenDailySnapshot_not_starts_with_nocase: String
  lastSubjectTokenDailySnapshot_ends_with: String
  lastSubjectTokenDailySnapshot_ends_with_nocase: String
  lastSubjectTokenDailySnapshot_not_ends_with: String
  lastSubjectTokenDailySnapshot_not_ends_with_nocase: String
  lastSubjectTokenDailySnapshot_: SubjectTokenDailySnapshot_filter
  hourlySnapshotEndTimestamps: [BigInt!]
  hourlySnapshotEndTimestamps_not: [BigInt!]
  hourlySnapshotEndTimestamps_contains: [BigInt!]
  hourlySnapshotEndTimestamps_contains_nocase: [BigInt!]
  hourlySnapshotEndTimestamps_not_contains: [BigInt!]
  hourlySnapshotEndTimestamps_not_contains_nocase: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubjectTokenDailySnapshot_filter]
  or: [SubjectTokenDailySnapshot_filter]
}

enum SubjectTokenDailySnapshot_orderBy {
  id
  startTimestamp
  endTimestamp
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  subject
  subject__id
  subject__buyVolume
  subject__sellVolume
  subject__protocolTokenInvested
  subject__protocolOrdersCount
  reserve
  startPrice
  endPrice
  dailyPriceChange
  totalSupply
  startUniqueHolders
  endUniqueHolders
  dailyUniqueHoldersChange
  startVolume
  endVolume
  dailyVolumeChange
  startSubjectFee
  endSubjectFee
  dailySubjectFeeChange
  startProtocolFee
  endProtocolFee
  dailyProtocolFeeChange
  createdAtBlockInfo
  createdAtBlockInfo__id
  createdAtBlockInfo__hash
  createdAtBlockInfo__blockNumber
  createdAtBlockInfo__timestamp
  updatedAtBlockInfo
  updatedAtBlockInfo__id
  updatedAtBlockInfo__hash
  updatedAtBlockInfo__blockNumber
  updatedAtBlockInfo__timestamp
  lastSubjectTokenDailySnapshot
  lastSubjectTokenDailySnapshot__id
  lastSubjectTokenDailySnapshot__startTimestamp
  lastSubjectTokenDailySnapshot__endTimestamp
  lastSubjectTokenDailySnapshot__reserve
  lastSubjectTokenDailySnapshot__startPrice
  lastSubjectTokenDailySnapshot__endPrice
  lastSubjectTokenDailySnapshot__dailyPriceChange
  lastSubjectTokenDailySnapshot__totalSupply
  lastSubjectTokenDailySnapshot__startUniqueHolders
  lastSubjectTokenDailySnapshot__endUniqueHolders
  lastSubjectTokenDailySnapshot__dailyUniqueHoldersChange
  lastSubjectTokenDailySnapshot__startVolume
  lastSubjectTokenDailySnapshot__endVolume
  lastSubjectTokenDailySnapshot__dailyVolumeChange
  lastSubjectTokenDailySnapshot__startSubjectFee
  lastSubjectTokenDailySnapshot__endSubjectFee
  lastSubjectTokenDailySnapshot__dailySubjectFeeChange
  lastSubjectTokenDailySnapshot__startProtocolFee
  lastSubjectTokenDailySnapshot__endProtocolFee
  lastSubjectTokenDailySnapshot__dailyProtocolFeeChange
  hourlySnapshotEndTimestamps
}

type SubjectTokenHourlySnapshot {
  """subjectId+-+endTimestamp"""
  id: ID!

  """start block timestamp"""
  startTimestamp: BigInt!

  """end block timestamp"""
  endTimestamp: BigInt!

  """subject token address"""
  subjectToken: SubjectToken!

  """address of the beneficiary"""
  subject: User

  """reserve balance (moxie)/ total locked value"""
  reserve: BigInt!

  """price of the token at the start of the snapshot"""
  startPrice: BigDecimal!

  """price of the token at the end of the snapshot"""
  endPrice: BigDecimal!

  """hourly price change"""
  hourlyPriceChange: BigDecimal!

  """Total supply of the token"""
  totalSupply: BigInt!

  """total number of unique holders at start of the snapshot"""
  startUniqueHolders: BigInt!

  """total number of unique holders at end of the snapshot"""
  endUniqueHolders: BigInt!

  """hourly unique holders change"""
  hourlyUniqueHoldersChange: BigInt!

  """
  amount of moxie used to buy or sell this subject token at start of the snapshot
  """
  startVolume: BigInt!

  """
  amount of moxie used to buy or sell this subject token at end of the snapshot
  """
  endVolume: BigInt!

  """hourly volume change"""
  hourlyVolumeChange: BigInt!

  """total beneficiary fee at start of the snapshot"""
  startSubjectFee: BigInt!

  """total beneficiary fee at end of the snapshot"""
  endSubjectFee: BigInt!

  """hourly beneficiary fee change"""
  hourlySubjectFeeChange: BigInt!

  """total protocol fee at start of the snapshot"""
  startProtocolFee: BigInt!

  """total protocol fee at end of the snapshot"""
  endProtocolFee: BigInt!

  """hourly protocol fee change"""
  hourlyProtocolFeeChange: BigInt!
  createdAtBlockInfo: BlockInfo!
  updatedAtBlockInfo: BlockInfo!
}

input SubjectTokenHourlySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: User_filter
  reserve: BigInt
  reserve_not: BigInt
  reserve_gt: BigInt
  reserve_lt: BigInt
  reserve_gte: BigInt
  reserve_lte: BigInt
  reserve_in: [BigInt!]
  reserve_not_in: [BigInt!]
  startPrice: BigDecimal
  startPrice_not: BigDecimal
  startPrice_gt: BigDecimal
  startPrice_lt: BigDecimal
  startPrice_gte: BigDecimal
  startPrice_lte: BigDecimal
  startPrice_in: [BigDecimal!]
  startPrice_not_in: [BigDecimal!]
  endPrice: BigDecimal
  endPrice_not: BigDecimal
  endPrice_gt: BigDecimal
  endPrice_lt: BigDecimal
  endPrice_gte: BigDecimal
  endPrice_lte: BigDecimal
  endPrice_in: [BigDecimal!]
  endPrice_not_in: [BigDecimal!]
  hourlyPriceChange: BigDecimal
  hourlyPriceChange_not: BigDecimal
  hourlyPriceChange_gt: BigDecimal
  hourlyPriceChange_lt: BigDecimal
  hourlyPriceChange_gte: BigDecimal
  hourlyPriceChange_lte: BigDecimal
  hourlyPriceChange_in: [BigDecimal!]
  hourlyPriceChange_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  startUniqueHolders: BigInt
  startUniqueHolders_not: BigInt
  startUniqueHolders_gt: BigInt
  startUniqueHolders_lt: BigInt
  startUniqueHolders_gte: BigInt
  startUniqueHolders_lte: BigInt
  startUniqueHolders_in: [BigInt!]
  startUniqueHolders_not_in: [BigInt!]
  endUniqueHolders: BigInt
  endUniqueHolders_not: BigInt
  endUniqueHolders_gt: BigInt
  endUniqueHolders_lt: BigInt
  endUniqueHolders_gte: BigInt
  endUniqueHolders_lte: BigInt
  endUniqueHolders_in: [BigInt!]
  endUniqueHolders_not_in: [BigInt!]
  hourlyUniqueHoldersChange: BigInt
  hourlyUniqueHoldersChange_not: BigInt
  hourlyUniqueHoldersChange_gt: BigInt
  hourlyUniqueHoldersChange_lt: BigInt
  hourlyUniqueHoldersChange_gte: BigInt
  hourlyUniqueHoldersChange_lte: BigInt
  hourlyUniqueHoldersChange_in: [BigInt!]
  hourlyUniqueHoldersChange_not_in: [BigInt!]
  startVolume: BigInt
  startVolume_not: BigInt
  startVolume_gt: BigInt
  startVolume_lt: BigInt
  startVolume_gte: BigInt
  startVolume_lte: BigInt
  startVolume_in: [BigInt!]
  startVolume_not_in: [BigInt!]
  endVolume: BigInt
  endVolume_not: BigInt
  endVolume_gt: BigInt
  endVolume_lt: BigInt
  endVolume_gte: BigInt
  endVolume_lte: BigInt
  endVolume_in: [BigInt!]
  endVolume_not_in: [BigInt!]
  hourlyVolumeChange: BigInt
  hourlyVolumeChange_not: BigInt
  hourlyVolumeChange_gt: BigInt
  hourlyVolumeChange_lt: BigInt
  hourlyVolumeChange_gte: BigInt
  hourlyVolumeChange_lte: BigInt
  hourlyVolumeChange_in: [BigInt!]
  hourlyVolumeChange_not_in: [BigInt!]
  startSubjectFee: BigInt
  startSubjectFee_not: BigInt
  startSubjectFee_gt: BigInt
  startSubjectFee_lt: BigInt
  startSubjectFee_gte: BigInt
  startSubjectFee_lte: BigInt
  startSubjectFee_in: [BigInt!]
  startSubjectFee_not_in: [BigInt!]
  endSubjectFee: BigInt
  endSubjectFee_not: BigInt
  endSubjectFee_gt: BigInt
  endSubjectFee_lt: BigInt
  endSubjectFee_gte: BigInt
  endSubjectFee_lte: BigInt
  endSubjectFee_in: [BigInt!]
  endSubjectFee_not_in: [BigInt!]
  hourlySubjectFeeChange: BigInt
  hourlySubjectFeeChange_not: BigInt
  hourlySubjectFeeChange_gt: BigInt
  hourlySubjectFeeChange_lt: BigInt
  hourlySubjectFeeChange_gte: BigInt
  hourlySubjectFeeChange_lte: BigInt
  hourlySubjectFeeChange_in: [BigInt!]
  hourlySubjectFeeChange_not_in: [BigInt!]
  startProtocolFee: BigInt
  startProtocolFee_not: BigInt
  startProtocolFee_gt: BigInt
  startProtocolFee_lt: BigInt
  startProtocolFee_gte: BigInt
  startProtocolFee_lte: BigInt
  startProtocolFee_in: [BigInt!]
  startProtocolFee_not_in: [BigInt!]
  endProtocolFee: BigInt
  endProtocolFee_not: BigInt
  endProtocolFee_gt: BigInt
  endProtocolFee_lt: BigInt
  endProtocolFee_gte: BigInt
  endProtocolFee_lte: BigInt
  endProtocolFee_in: [BigInt!]
  endProtocolFee_not_in: [BigInt!]
  hourlyProtocolFeeChange: BigInt
  hourlyProtocolFeeChange_not: BigInt
  hourlyProtocolFeeChange_gt: BigInt
  hourlyProtocolFeeChange_lt: BigInt
  hourlyProtocolFeeChange_gte: BigInt
  hourlyProtocolFeeChange_lte: BigInt
  hourlyProtocolFeeChange_in: [BigInt!]
  hourlyProtocolFeeChange_not_in: [BigInt!]
  createdAtBlockInfo: String
  createdAtBlockInfo_not: String
  createdAtBlockInfo_gt: String
  createdAtBlockInfo_lt: String
  createdAtBlockInfo_gte: String
  createdAtBlockInfo_lte: String
  createdAtBlockInfo_in: [String!]
  createdAtBlockInfo_not_in: [String!]
  createdAtBlockInfo_contains: String
  createdAtBlockInfo_contains_nocase: String
  createdAtBlockInfo_not_contains: String
  createdAtBlockInfo_not_contains_nocase: String
  createdAtBlockInfo_starts_with: String
  createdAtBlockInfo_starts_with_nocase: String
  createdAtBlockInfo_not_starts_with: String
  createdAtBlockInfo_not_starts_with_nocase: String
  createdAtBlockInfo_ends_with: String
  createdAtBlockInfo_ends_with_nocase: String
  createdAtBlockInfo_not_ends_with: String
  createdAtBlockInfo_not_ends_with_nocase: String
  createdAtBlockInfo_: BlockInfo_filter
  updatedAtBlockInfo: String
  updatedAtBlockInfo_not: String
  updatedAtBlockInfo_gt: String
  updatedAtBlockInfo_lt: String
  updatedAtBlockInfo_gte: String
  updatedAtBlockInfo_lte: String
  updatedAtBlockInfo_in: [String!]
  updatedAtBlockInfo_not_in: [String!]
  updatedAtBlockInfo_contains: String
  updatedAtBlockInfo_contains_nocase: String
  updatedAtBlockInfo_not_contains: String
  updatedAtBlockInfo_not_contains_nocase: String
  updatedAtBlockInfo_starts_with: String
  updatedAtBlockInfo_starts_with_nocase: String
  updatedAtBlockInfo_not_starts_with: String
  updatedAtBlockInfo_not_starts_with_nocase: String
  updatedAtBlockInfo_ends_with: String
  updatedAtBlockInfo_ends_with_nocase: String
  updatedAtBlockInfo_not_ends_with: String
  updatedAtBlockInfo_not_ends_with_nocase: String
  updatedAtBlockInfo_: BlockInfo_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubjectTokenHourlySnapshot_filter]
  or: [SubjectTokenHourlySnapshot_filter]
}

enum SubjectTokenHourlySnapshot_orderBy {
  id
  startTimestamp
  endTimestamp
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  subject
  subject__id
  subject__buyVolume
  subject__sellVolume
  subject__protocolTokenInvested
  subject__protocolOrdersCount
  reserve
  startPrice
  endPrice
  hourlyPriceChange
  totalSupply
  startUniqueHolders
  endUniqueHolders
  hourlyUniqueHoldersChange
  startVolume
  endVolume
  hourlyVolumeChange
  startSubjectFee
  endSubjectFee
  hourlySubjectFeeChange
  startProtocolFee
  endProtocolFee
  hourlyProtocolFeeChange
  createdAtBlockInfo
  createdAtBlockInfo__id
  createdAtBlockInfo__hash
  createdAtBlockInfo__blockNumber
  createdAtBlockInfo__timestamp
  updatedAtBlockInfo
  updatedAtBlockInfo__id
  updatedAtBlockInfo__hash
  updatedAtBlockInfo__blockNumber
  updatedAtBlockInfo__timestamp
}

type SubjectTokenRollingDailySnapshot {
  """subjectId+-+endTimestamp"""
  id: ID!

  """start block timestamp"""
  startTimestamp: BigInt!

  """end block timestamp"""
  endTimestamp: BigInt!

  """reference snapshot's end timestamp"""
  startReferenceTimestamp: BigInt!

  """subject token address"""
  subjectToken: SubjectToken!

  """address of the beneficiary"""
  subject: User

  """reserve balance (moxie)/ total locked value"""
  reserve: BigInt!

  """price of the token at the start of the snapshot"""
  startPrice: BigDecimal!

  """price of the token at the end of the snapshot"""
  endPrice: BigDecimal!

  """daily price change"""
  dailyPriceChange: BigDecimal!

  """Total supply of the token"""
  totalSupply: BigInt!

  """total number of unique holders at start of the snapshot"""
  startUniqueHolders: BigInt!

  """total number of unique holders at end of the snapshot"""
  endUniqueHolders: BigInt!

  """daily unique holders change"""
  dailyUniqueHoldersChange: BigInt!

  """
  amount of moxie used to buy or sell this subject token at start of the snapshot
  """
  startVolume: BigInt!

  """
  amount of moxie used to buy or sell this subject token at end of the snapshot
  """
  endVolume: BigInt!

  """daily volume change"""
  dailyVolumeChange: BigInt!

  """total beneficiary fee at start of the snapshot"""
  startSubjectFee: BigInt!

  """total beneficiary fee at end of the snapshot"""
  endSubjectFee: BigInt!

  """daily beneficiary fee change"""
  dailySubjectFeeChange: BigInt!

  """total protocol fee at start of the snapshot"""
  startProtocolFee: BigInt!

  """total protocol fee at end of the snapshot"""
  endProtocolFee: BigInt!

  """daily protocol fee change"""
  dailyProtocolFeeChange: BigInt!
  createdAtBlockInfo: BlockInfo!
  updatedAtBlockInfo: BlockInfo!
  initialHourlySnapshot: SubjectTokenHourlySnapshot
}

input SubjectTokenRollingDailySnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  startTimestamp: BigInt
  startTimestamp_not: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_lt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_not_in: [BigInt!]
  endTimestamp: BigInt
  endTimestamp_not: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_lt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_not_in: [BigInt!]
  startReferenceTimestamp: BigInt
  startReferenceTimestamp_not: BigInt
  startReferenceTimestamp_gt: BigInt
  startReferenceTimestamp_lt: BigInt
  startReferenceTimestamp_gte: BigInt
  startReferenceTimestamp_lte: BigInt
  startReferenceTimestamp_in: [BigInt!]
  startReferenceTimestamp_not_in: [BigInt!]
  subjectToken: String
  subjectToken_not: String
  subjectToken_gt: String
  subjectToken_lt: String
  subjectToken_gte: String
  subjectToken_lte: String
  subjectToken_in: [String!]
  subjectToken_not_in: [String!]
  subjectToken_contains: String
  subjectToken_contains_nocase: String
  subjectToken_not_contains: String
  subjectToken_not_contains_nocase: String
  subjectToken_starts_with: String
  subjectToken_starts_with_nocase: String
  subjectToken_not_starts_with: String
  subjectToken_not_starts_with_nocase: String
  subjectToken_ends_with: String
  subjectToken_ends_with_nocase: String
  subjectToken_not_ends_with: String
  subjectToken_not_ends_with_nocase: String
  subjectToken_: SubjectToken_filter
  subject: String
  subject_not: String
  subject_gt: String
  subject_lt: String
  subject_gte: String
  subject_lte: String
  subject_in: [String!]
  subject_not_in: [String!]
  subject_contains: String
  subject_contains_nocase: String
  subject_not_contains: String
  subject_not_contains_nocase: String
  subject_starts_with: String
  subject_starts_with_nocase: String
  subject_not_starts_with: String
  subject_not_starts_with_nocase: String
  subject_ends_with: String
  subject_ends_with_nocase: String
  subject_not_ends_with: String
  subject_not_ends_with_nocase: String
  subject_: User_filter
  reserve: BigInt
  reserve_not: BigInt
  reserve_gt: BigInt
  reserve_lt: BigInt
  reserve_gte: BigInt
  reserve_lte: BigInt
  reserve_in: [BigInt!]
  reserve_not_in: [BigInt!]
  startPrice: BigDecimal
  startPrice_not: BigDecimal
  startPrice_gt: BigDecimal
  startPrice_lt: BigDecimal
  startPrice_gte: BigDecimal
  startPrice_lte: BigDecimal
  startPrice_in: [BigDecimal!]
  startPrice_not_in: [BigDecimal!]
  endPrice: BigDecimal
  endPrice_not: BigDecimal
  endPrice_gt: BigDecimal
  endPrice_lt: BigDecimal
  endPrice_gte: BigDecimal
  endPrice_lte: BigDecimal
  endPrice_in: [BigDecimal!]
  endPrice_not_in: [BigDecimal!]
  dailyPriceChange: BigDecimal
  dailyPriceChange_not: BigDecimal
  dailyPriceChange_gt: BigDecimal
  dailyPriceChange_lt: BigDecimal
  dailyPriceChange_gte: BigDecimal
  dailyPriceChange_lte: BigDecimal
  dailyPriceChange_in: [BigDecimal!]
  dailyPriceChange_not_in: [BigDecimal!]
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  startUniqueHolders: BigInt
  startUniqueHolders_not: BigInt
  startUniqueHolders_gt: BigInt
  startUniqueHolders_lt: BigInt
  startUniqueHolders_gte: BigInt
  startUniqueHolders_lte: BigInt
  startUniqueHolders_in: [BigInt!]
  startUniqueHolders_not_in: [BigInt!]
  endUniqueHolders: BigInt
  endUniqueHolders_not: BigInt
  endUniqueHolders_gt: BigInt
  endUniqueHolders_lt: BigInt
  endUniqueHolders_gte: BigInt
  endUniqueHolders_lte: BigInt
  endUniqueHolders_in: [BigInt!]
  endUniqueHolders_not_in: [BigInt!]
  dailyUniqueHoldersChange: BigInt
  dailyUniqueHoldersChange_not: BigInt
  dailyUniqueHoldersChange_gt: BigInt
  dailyUniqueHoldersChange_lt: BigInt
  dailyUniqueHoldersChange_gte: BigInt
  dailyUniqueHoldersChange_lte: BigInt
  dailyUniqueHoldersChange_in: [BigInt!]
  dailyUniqueHoldersChange_not_in: [BigInt!]
  startVolume: BigInt
  startVolume_not: BigInt
  startVolume_gt: BigInt
  startVolume_lt: BigInt
  startVolume_gte: BigInt
  startVolume_lte: BigInt
  startVolume_in: [BigInt!]
  startVolume_not_in: [BigInt!]
  endVolume: BigInt
  endVolume_not: BigInt
  endVolume_gt: BigInt
  endVolume_lt: BigInt
  endVolume_gte: BigInt
  endVolume_lte: BigInt
  endVolume_in: [BigInt!]
  endVolume_not_in: [BigInt!]
  dailyVolumeChange: BigInt
  dailyVolumeChange_not: BigInt
  dailyVolumeChange_gt: BigInt
  dailyVolumeChange_lt: BigInt
  dailyVolumeChange_gte: BigInt
  dailyVolumeChange_lte: BigInt
  dailyVolumeChange_in: [BigInt!]
  dailyVolumeChange_not_in: [BigInt!]
  startSubjectFee: BigInt
  startSubjectFee_not: BigInt
  startSubjectFee_gt: BigInt
  startSubjectFee_lt: BigInt
  startSubjectFee_gte: BigInt
  startSubjectFee_lte: BigInt
  startSubjectFee_in: [BigInt!]
  startSubjectFee_not_in: [BigInt!]
  endSubjectFee: BigInt
  endSubjectFee_not: BigInt
  endSubjectFee_gt: BigInt
  endSubjectFee_lt: BigInt
  endSubjectFee_gte: BigInt
  endSubjectFee_lte: BigInt
  endSubjectFee_in: [BigInt!]
  endSubjectFee_not_in: [BigInt!]
  dailySubjectFeeChange: BigInt
  dailySubjectFeeChange_not: BigInt
  dailySubjectFeeChange_gt: BigInt
  dailySubjectFeeChange_lt: BigInt
  dailySubjectFeeChange_gte: BigInt
  dailySubjectFeeChange_lte: BigInt
  dailySubjectFeeChange_in: [BigInt!]
  dailySubjectFeeChange_not_in: [BigInt!]
  startProtocolFee: BigInt
  startProtocolFee_not: BigInt
  startProtocolFee_gt: BigInt
  startProtocolFee_lt: BigInt
  startProtocolFee_gte: BigInt
  startProtocolFee_lte: BigInt
  startProtocolFee_in: [BigInt!]
  startProtocolFee_not_in: [BigInt!]
  endProtocolFee: BigInt
  endProtocolFee_not: BigInt
  endProtocolFee_gt: BigInt
  endProtocolFee_lt: BigInt
  endProtocolFee_gte: BigInt
  endProtocolFee_lte: BigInt
  endProtocolFee_in: [BigInt!]
  endProtocolFee_not_in: [BigInt!]
  dailyProtocolFeeChange: BigInt
  dailyProtocolFeeChange_not: BigInt
  dailyProtocolFeeChange_gt: BigInt
  dailyProtocolFeeChange_lt: BigInt
  dailyProtocolFeeChange_gte: BigInt
  dailyProtocolFeeChange_lte: BigInt
  dailyProtocolFeeChange_in: [BigInt!]
  dailyProtocolFeeChange_not_in: [BigInt!]
  createdAtBlockInfo: String
  createdAtBlockInfo_not: String
  createdAtBlockInfo_gt: String
  createdAtBlockInfo_lt: String
  createdAtBlockInfo_gte: String
  createdAtBlockInfo_lte: String
  createdAtBlockInfo_in: [String!]
  createdAtBlockInfo_not_in: [String!]
  createdAtBlockInfo_contains: String
  createdAtBlockInfo_contains_nocase: String
  createdAtBlockInfo_not_contains: String
  createdAtBlockInfo_not_contains_nocase: String
  createdAtBlockInfo_starts_with: String
  createdAtBlockInfo_starts_with_nocase: String
  createdAtBlockInfo_not_starts_with: String
  createdAtBlockInfo_not_starts_with_nocase: String
  createdAtBlockInfo_ends_with: String
  createdAtBlockInfo_ends_with_nocase: String
  createdAtBlockInfo_not_ends_with: String
  createdAtBlockInfo_not_ends_with_nocase: String
  createdAtBlockInfo_: BlockInfo_filter
  updatedAtBlockInfo: String
  updatedAtBlockInfo_not: String
  updatedAtBlockInfo_gt: String
  updatedAtBlockInfo_lt: String
  updatedAtBlockInfo_gte: String
  updatedAtBlockInfo_lte: String
  updatedAtBlockInfo_in: [String!]
  updatedAtBlockInfo_not_in: [String!]
  updatedAtBlockInfo_contains: String
  updatedAtBlockInfo_contains_nocase: String
  updatedAtBlockInfo_not_contains: String
  updatedAtBlockInfo_not_contains_nocase: String
  updatedAtBlockInfo_starts_with: String
  updatedAtBlockInfo_starts_with_nocase: String
  updatedAtBlockInfo_not_starts_with: String
  updatedAtBlockInfo_not_starts_with_nocase: String
  updatedAtBlockInfo_ends_with: String
  updatedAtBlockInfo_ends_with_nocase: String
  updatedAtBlockInfo_not_ends_with: String
  updatedAtBlockInfo_not_ends_with_nocase: String
  updatedAtBlockInfo_: BlockInfo_filter
  initialHourlySnapshot: String
  initialHourlySnapshot_not: String
  initialHourlySnapshot_gt: String
  initialHourlySnapshot_lt: String
  initialHourlySnapshot_gte: String
  initialHourlySnapshot_lte: String
  initialHourlySnapshot_in: [String!]
  initialHourlySnapshot_not_in: [String!]
  initialHourlySnapshot_contains: String
  initialHourlySnapshot_contains_nocase: String
  initialHourlySnapshot_not_contains: String
  initialHourlySnapshot_not_contains_nocase: String
  initialHourlySnapshot_starts_with: String
  initialHourlySnapshot_starts_with_nocase: String
  initialHourlySnapshot_not_starts_with: String
  initialHourlySnapshot_not_starts_with_nocase: String
  initialHourlySnapshot_ends_with: String
  initialHourlySnapshot_ends_with_nocase: String
  initialHourlySnapshot_not_ends_with: String
  initialHourlySnapshot_not_ends_with_nocase: String
  initialHourlySnapshot_: SubjectTokenHourlySnapshot_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubjectTokenRollingDailySnapshot_filter]
  or: [SubjectTokenRollingDailySnapshot_filter]
}

enum SubjectTokenRollingDailySnapshot_orderBy {
  id
  startTimestamp
  endTimestamp
  startReferenceTimestamp
  subjectToken
  subjectToken__id
  subjectToken__name
  subjectToken__symbol
  subjectToken__decimals
  subjectToken__reserve
  subjectToken__currentPriceInMoxie
  subjectToken__currentPriceInWeiInMoxie
  subjectToken__reserveRatio
  subjectToken__totalSupply
  subjectToken__initialSupply
  subjectToken__uniqueHolders
  subjectToken__lifetimeVolume
  subjectToken__subjectFee
  subjectToken__protocolFee
  subjectToken__buySideVolume
  subjectToken__sellSideVolume
  subjectToken__protocolTokenInvested
  subjectToken__status
  subject
  subject__id
  subject__buyVolume
  subject__sellVolume
  subject__protocolTokenInvested
  subject__protocolOrdersCount
  reserve
  startPrice
  endPrice
  dailyPriceChange
  totalSupply
  startUniqueHolders
  endUniqueHolders
  dailyUniqueHoldersChange
  startVolume
  endVolume
  dailyVolumeChange
  startSubjectFee
  endSubjectFee
  dailySubjectFeeChange
  startProtocolFee
  endProtocolFee
  dailyProtocolFeeChange
  createdAtBlockInfo
  createdAtBlockInfo__id
  createdAtBlockInfo__hash
  createdAtBlockInfo__blockNumber
  createdAtBlockInfo__timestamp
  updatedAtBlockInfo
  updatedAtBlockInfo__id
  updatedAtBlockInfo__hash
  updatedAtBlockInfo__blockNumber
  updatedAtBlockInfo__timestamp
  initialHourlySnapshot
  initialHourlySnapshot__id
  initialHourlySnapshot__startTimestamp
  initialHourlySnapshot__endTimestamp
  initialHourlySnapshot__reserve
  initialHourlySnapshot__startPrice
  initialHourlySnapshot__endPrice
  initialHourlySnapshot__hourlyPriceChange
  initialHourlySnapshot__totalSupply
  initialHourlySnapshot__startUniqueHolders
  initialHourlySnapshot__endUniqueHolders
  initialHourlySnapshot__hourlyUniqueHoldersChange
  initialHourlySnapshot__startVolume
  initialHourlySnapshot__endVolume
  initialHourlySnapshot__hourlyVolumeChange
  initialHourlySnapshot__startSubjectFee
  initialHourlySnapshot__endSubjectFee
  initialHourlySnapshot__hourlySubjectFeeChange
  initialHourlySnapshot__startProtocolFee
  initialHourlySnapshot__endProtocolFee
  initialHourlySnapshot__hourlyProtocolFeeChange
}

type Subscription {
  blockInfo(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BlockInfo
  blockInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: BlockInfo_orderBy
    orderDirection: OrderDirection
    where: BlockInfo_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BlockInfo!]!
  subjectTokenRollingDailySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectTokenRollingDailySnapshot
  subjectTokenRollingDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectTokenRollingDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: SubjectTokenRollingDailySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectTokenRollingDailySnapshot!]!
  subjectTokenDailySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectTokenDailySnapshot
  subjectTokenDailySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectTokenDailySnapshot_orderBy
    orderDirection: OrderDirection
    where: SubjectTokenDailySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectTokenDailySnapshot!]!
  subjectTokenHourlySnapshot(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectTokenHourlySnapshot
  subjectTokenHourlySnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectTokenHourlySnapshot_orderBy
    orderDirection: OrderDirection
    where: SubjectTokenHourlySnapshot_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectTokenHourlySnapshot!]!
  subjectToken(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectToken
  subjectTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectToken_orderBy
    orderDirection: OrderDirection
    where: SubjectToken_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectToken!]!
  auction(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  portfolio(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Portfolio
  portfolios(
    skip: Int = 0
    first: Int = 100
    orderBy: Portfolio_orderBy
    orderDirection: OrderDirection
    where: Portfolio_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Portfolio!]!
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  order(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Order
  orders(
    skip: Int = 0
    first: Int = 100
    orderBy: Order_orderBy
    orderDirection: OrderDirection
    where: Order_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Order!]!
  protocolFeeBeneficiary(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolFeeBeneficiary
  protocolFeeBeneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolFeeBeneficiary_orderBy
    orderDirection: OrderDirection
    where: ProtocolFeeBeneficiary_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolFeeBeneficiary!]!
  protocolFeeTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolFeeTransfer
  protocolFeeTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: ProtocolFeeTransfer_orderBy
    orderDirection: OrderDirection
    where: ProtocolFeeTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ProtocolFeeTransfer!]!
  subjectFeeTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubjectFeeTransfer
  subjectFeeTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: SubjectFeeTransfer_orderBy
    orderDirection: OrderDirection
    where: SubjectFeeTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubjectFeeTransfer!]!
  summary(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Summary
  summaries(
    skip: Int = 0
    first: Int = 100
    orderBy: Summary_orderBy
    orderDirection: OrderDirection
    where: Summary_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Summary!]!
  auctionUser(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AuctionUser
  auctionUsers(
    skip: Int = 0
    first: Int = 100
    orderBy: AuctionUser_orderBy
    orderDirection: OrderDirection
    where: AuctionUser_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AuctionUser!]!
  vaultDepositTx(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultDepositTx
  vaultDepositTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultDepositTx_orderBy
    orderDirection: OrderDirection
    where: VaultDepositTx_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultDepositTx!]!
  vaultTransferTx(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VaultTransferTx
  vaultTransferTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: VaultTransferTx_orderBy
    orderDirection: OrderDirection
    where: VaultTransferTx_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VaultTransferTx!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Summary {
  id: ID!
  totalSubjectTokensIssued: BigInt!

  """total reserve in the vault"""
  totalReserve: BigInt!

  """
  total protocol token spent by all users - after reducing when user sells the token
  """
  totalProtocolTokenInvested: BigDecimal!
  activeProtocolFeeBeneficiary: ProtocolFeeBeneficiary
  protocolBuyFeePct: BigInt!
  protocolSellFeePct: BigInt!
  subjectBuyFeePct: BigInt!
  subjectSellFeePct: BigInt!
  numberOfBuyOrders: BigInt!
  numberOfSellOrders: BigInt!
  numberOfAuctionOrders: BigInt!
  numberOfUsers: BigInt!

  """total moxie spent in buy orders + initialization"""
  totalBuyVolume: BigInt!
  totalSellVolume: BigInt!
  totalProtocolFee: BigInt!
  totalProtocolFeeFromAuction: BigInt!
  totalSubjectFee: BigInt!
  totalSubjectFeeFromAuction: BigInt!
}

input Summary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalSubjectTokensIssued: BigInt
  totalSubjectTokensIssued_not: BigInt
  totalSubjectTokensIssued_gt: BigInt
  totalSubjectTokensIssued_lt: BigInt
  totalSubjectTokensIssued_gte: BigInt
  totalSubjectTokensIssued_lte: BigInt
  totalSubjectTokensIssued_in: [BigInt!]
  totalSubjectTokensIssued_not_in: [BigInt!]
  totalReserve: BigInt
  totalReserve_not: BigInt
  totalReserve_gt: BigInt
  totalReserve_lt: BigInt
  totalReserve_gte: BigInt
  totalReserve_lte: BigInt
  totalReserve_in: [BigInt!]
  totalReserve_not_in: [BigInt!]
  totalProtocolTokenInvested: BigDecimal
  totalProtocolTokenInvested_not: BigDecimal
  totalProtocolTokenInvested_gt: BigDecimal
  totalProtocolTokenInvested_lt: BigDecimal
  totalProtocolTokenInvested_gte: BigDecimal
  totalProtocolTokenInvested_lte: BigDecimal
  totalProtocolTokenInvested_in: [BigDecimal!]
  totalProtocolTokenInvested_not_in: [BigDecimal!]
  activeProtocolFeeBeneficiary: String
  activeProtocolFeeBeneficiary_not: String
  activeProtocolFeeBeneficiary_gt: String
  activeProtocolFeeBeneficiary_lt: String
  activeProtocolFeeBeneficiary_gte: String
  activeProtocolFeeBeneficiary_lte: String
  activeProtocolFeeBeneficiary_in: [String!]
  activeProtocolFeeBeneficiary_not_in: [String!]
  activeProtocolFeeBeneficiary_contains: String
  activeProtocolFeeBeneficiary_contains_nocase: String
  activeProtocolFeeBeneficiary_not_contains: String
  activeProtocolFeeBeneficiary_not_contains_nocase: String
  activeProtocolFeeBeneficiary_starts_with: String
  activeProtocolFeeBeneficiary_starts_with_nocase: String
  activeProtocolFeeBeneficiary_not_starts_with: String
  activeProtocolFeeBeneficiary_not_starts_with_nocase: String
  activeProtocolFeeBeneficiary_ends_with: String
  activeProtocolFeeBeneficiary_ends_with_nocase: String
  activeProtocolFeeBeneficiary_not_ends_with: String
  activeProtocolFeeBeneficiary_not_ends_with_nocase: String
  activeProtocolFeeBeneficiary_: ProtocolFeeBeneficiary_filter
  protocolBuyFeePct: BigInt
  protocolBuyFeePct_not: BigInt
  protocolBuyFeePct_gt: BigInt
  protocolBuyFeePct_lt: BigInt
  protocolBuyFeePct_gte: BigInt
  protocolBuyFeePct_lte: BigInt
  protocolBuyFeePct_in: [BigInt!]
  protocolBuyFeePct_not_in: [BigInt!]
  protocolSellFeePct: BigInt
  protocolSellFeePct_not: BigInt
  protocolSellFeePct_gt: BigInt
  protocolSellFeePct_lt: BigInt
  protocolSellFeePct_gte: BigInt
  protocolSellFeePct_lte: BigInt
  protocolSellFeePct_in: [BigInt!]
  protocolSellFeePct_not_in: [BigInt!]
  subjectBuyFeePct: BigInt
  subjectBuyFeePct_not: BigInt
  subjectBuyFeePct_gt: BigInt
  subjectBuyFeePct_lt: BigInt
  subjectBuyFeePct_gte: BigInt
  subjectBuyFeePct_lte: BigInt
  subjectBuyFeePct_in: [BigInt!]
  subjectBuyFeePct_not_in: [BigInt!]
  subjectSellFeePct: BigInt
  subjectSellFeePct_not: BigInt
  subjectSellFeePct_gt: BigInt
  subjectSellFeePct_lt: BigInt
  subjectSellFeePct_gte: BigInt
  subjectSellFeePct_lte: BigInt
  subjectSellFeePct_in: [BigInt!]
  subjectSellFeePct_not_in: [BigInt!]
  numberOfBuyOrders: BigInt
  numberOfBuyOrders_not: BigInt
  numberOfBuyOrders_gt: BigInt
  numberOfBuyOrders_lt: BigInt
  numberOfBuyOrders_gte: BigInt
  numberOfBuyOrders_lte: BigInt
  numberOfBuyOrders_in: [BigInt!]
  numberOfBuyOrders_not_in: [BigInt!]
  numberOfSellOrders: BigInt
  numberOfSellOrders_not: BigInt
  numberOfSellOrders_gt: BigInt
  numberOfSellOrders_lt: BigInt
  numberOfSellOrders_gte: BigInt
  numberOfSellOrders_lte: BigInt
  numberOfSellOrders_in: [BigInt!]
  numberOfSellOrders_not_in: [BigInt!]
  numberOfAuctionOrders: BigInt
  numberOfAuctionOrders_not: BigInt
  numberOfAuctionOrders_gt: BigInt
  numberOfAuctionOrders_lt: BigInt
  numberOfAuctionOrders_gte: BigInt
  numberOfAuctionOrders_lte: BigInt
  numberOfAuctionOrders_in: [BigInt!]
  numberOfAuctionOrders_not_in: [BigInt!]
  numberOfUsers: BigInt
  numberOfUsers_not: BigInt
  numberOfUsers_gt: BigInt
  numberOfUsers_lt: BigInt
  numberOfUsers_gte: BigInt
  numberOfUsers_lte: BigInt
  numberOfUsers_in: [BigInt!]
  numberOfUsers_not_in: [BigInt!]
  totalBuyVolume: BigInt
  totalBuyVolume_not: BigInt
  totalBuyVolume_gt: BigInt
  totalBuyVolume_lt: BigInt
  totalBuyVolume_gte: BigInt
  totalBuyVolume_lte: BigInt
  totalBuyVolume_in: [BigInt!]
  totalBuyVolume_not_in: [BigInt!]
  totalSellVolume: BigInt
  totalSellVolume_not: BigInt
  totalSellVolume_gt: BigInt
  totalSellVolume_lt: BigInt
  totalSellVolume_gte: BigInt
  totalSellVolume_lte: BigInt
  totalSellVolume_in: [BigInt!]
  totalSellVolume_not_in: [BigInt!]
  totalProtocolFee: BigInt
  totalProtocolFee_not: BigInt
  totalProtocolFee_gt: BigInt
  totalProtocolFee_lt: BigInt
  totalProtocolFee_gte: BigInt
  totalProtocolFee_lte: BigInt
  totalProtocolFee_in: [BigInt!]
  totalProtocolFee_not_in: [BigInt!]
  totalProtocolFeeFromAuction: BigInt
  totalProtocolFeeFromAuction_not: BigInt
  totalProtocolFeeFromAuction_gt: BigInt
  totalProtocolFeeFromAuction_lt: BigInt
  totalProtocolFeeFromAuction_gte: BigInt
  totalProtocolFeeFromAuction_lte: BigInt
  totalProtocolFeeFromAuction_in: [BigInt!]
  totalProtocolFeeFromAuction_not_in: [BigInt!]
  totalSubjectFee: BigInt
  totalSubjectFee_not: BigInt
  totalSubjectFee_gt: BigInt
  totalSubjectFee_lt: BigInt
  totalSubjectFee_gte: BigInt
  totalSubjectFee_lte: BigInt
  totalSubjectFee_in: [BigInt!]
  totalSubjectFee_not_in: [BigInt!]
  totalSubjectFeeFromAuction: BigInt
  totalSubjectFeeFromAuction_not: BigInt
  totalSubjectFeeFromAuction_gt: BigInt
  totalSubjectFeeFromAuction_lt: BigInt
  totalSubjectFeeFromAuction_gte: BigInt
  totalSubjectFeeFromAuction_lte: BigInt
  totalSubjectFeeFromAuction_in: [BigInt!]
  totalSubjectFeeFromAuction_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Summary_filter]
  or: [Summary_filter]
}

enum Summary_orderBy {
  id
  totalSubjectTokensIssued
  totalReserve
  totalProtocolTokenInvested
  activeProtocolFeeBeneficiary
  activeProtocolFeeBeneficiary__id
  activeProtocolFeeBeneficiary__beneficiary
  activeProtocolFeeBeneficiary__totalFees
  protocolBuyFeePct
  protocolSellFeePct
  subjectBuyFeePct
  subjectSellFeePct
  numberOfBuyOrders
  numberOfSellOrders
  numberOfAuctionOrders
  numberOfUsers
  totalBuyVolume
  totalSellVolume
  totalProtocolFee
  totalProtocolFeeFromAuction
  totalSubjectFee
  totalSubjectFeeFromAuction
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type User {
  """Ethereum address of the user"""
  id: ID!

  """User's Portfolio for each subject token he/she holds"""
  portfolio(skip: Int = 0, first: Int = 100, orderBy: Portfolio_orderBy, orderDirection: OrderDirection, where: Portfolio_filter): [Portfolio!]!

  """orders placed by the user (auction, buy & sell)"""
  orders(skip: Int = 0, first: Int = 100, orderBy: Order_orderBy, orderDirection: OrderDirection, where: Order_filter): [Order!]!

  """beneficiary fee transfers"""
  subjectFeeTransfer(skip: Int = 0, first: Int = 100, orderBy: SubjectFeeTransfer_orderBy, orderDirection: OrderDirection, where: SubjectFeeTransfer_filter): [SubjectFeeTransfer!]!

  """total moxie spent by the user"""
  buyVolume: BigInt!

  """Moxie earned by user to sell the subject token"""
  sellVolume: BigInt!

  """total moxie invested by the user"""
  protocolTokenInvested: BigDecimal!

  """total number of orders (auction & buyOrders)"""
  protocolOrdersCount: BigInt!

  """created at block information"""
  createdAtBlockInfo: BlockInfo!

  """updated at block information"""
  updatedAtBlockInfo: BlockInfo!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  portfolio_: Portfolio_filter
  orders_: Order_filter
  subjectFeeTransfer: [String!]
  subjectFeeTransfer_not: [String!]
  subjectFeeTransfer_contains: [String!]
  subjectFeeTransfer_contains_nocase: [String!]
  subjectFeeTransfer_not_contains: [String!]
  subjectFeeTransfer_not_contains_nocase: [String!]
  subjectFeeTransfer_: SubjectFeeTransfer_filter
  buyVolume: BigInt
  buyVolume_not: BigInt
  buyVolume_gt: BigInt
  buyVolume_lt: BigInt
  buyVolume_gte: BigInt
  buyVolume_lte: BigInt
  buyVolume_in: [BigInt!]
  buyVolume_not_in: [BigInt!]
  sellVolume: BigInt
  sellVolume_not: BigInt
  sellVolume_gt: BigInt
  sellVolume_lt: BigInt
  sellVolume_gte: BigInt
  sellVolume_lte: BigInt
  sellVolume_in: [BigInt!]
  sellVolume_not_in: [BigInt!]
  protocolTokenInvested: BigDecimal
  protocolTokenInvested_not: BigDecimal
  protocolTokenInvested_gt: BigDecimal
  protocolTokenInvested_lt: BigDecimal
  protocolTokenInvested_gte: BigDecimal
  protocolTokenInvested_lte: BigDecimal
  protocolTokenInvested_in: [BigDecimal!]
  protocolTokenInvested_not_in: [BigDecimal!]
  protocolOrdersCount: BigInt
  protocolOrdersCount_not: BigInt
  protocolOrdersCount_gt: BigInt
  protocolOrdersCount_lt: BigInt
  protocolOrdersCount_gte: BigInt
  protocolOrdersCount_lte: BigInt
  protocolOrdersCount_in: [BigInt!]
  protocolOrdersCount_not_in: [BigInt!]
  createdAtBlockInfo: String
  createdAtBlockInfo_not: String
  createdAtBlockInfo_gt: String
  createdAtBlockInfo_lt: String
  createdAtBlockInfo_gte: String
  createdAtBlockInfo_lte: String
  createdAtBlockInfo_in: [String!]
  createdAtBlockInfo_not_in: [String!]
  createdAtBlockInfo_contains: String
  createdAtBlockInfo_contains_nocase: String
  createdAtBlockInfo_not_contains: String
  createdAtBlockInfo_not_contains_nocase: String
  createdAtBlockInfo_starts_with: String
  createdAtBlockInfo_starts_with_nocase: String
  createdAtBlockInfo_not_starts_with: String
  createdAtBlockInfo_not_starts_with_nocase: String
  createdAtBlockInfo_ends_with: String
  createdAtBlockInfo_ends_with_nocase: String
  createdAtBlockInfo_not_ends_with: String
  createdAtBlockInfo_not_ends_with_nocase: String
  createdAtBlockInfo_: BlockInfo_filter
  updatedAtBlockInfo: String
  updatedAtBlockInfo_not: String
  updatedAtBlockInfo_gt: String
  updatedAtBlockInfo_lt: String
  updatedAtBlockInfo_gte: String
  updatedAtBlockInfo_lte: String
  updatedAtBlockInfo_in: [String!]
  updatedAtBlockInfo_not_in: [String!]
  updatedAtBlockInfo_contains: String
  updatedAtBlockInfo_contains_nocase: String
  updatedAtBlockInfo_not_contains: String
  updatedAtBlockInfo_not_contains_nocase: String
  updatedAtBlockInfo_starts_with: String
  updatedAtBlockInfo_starts_with_nocase: String
  updatedAtBlockInfo_not_starts_with: String
  updatedAtBlockInfo_not_starts_with_nocase: String
  updatedAtBlockInfo_ends_with: String
  updatedAtBlockInfo_ends_with_nocase: String
  updatedAtBlockInfo_not_ends_with: String
  updatedAtBlockInfo_not_ends_with_nocase: String
  updatedAtBlockInfo_: BlockInfo_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  portfolio
  orders
  subjectFeeTransfer
  buyVolume
  sellVolume
  protocolTokenInvested
  protocolOrdersCount
  createdAtBlockInfo
  createdAtBlockInfo__id
  createdAtBlockInfo__hash
  createdAtBlockInfo__blockNumber
  createdAtBlockInfo__timestamp
  updatedAtBlockInfo
  updatedAtBlockInfo__id
  updatedAtBlockInfo__hash
  updatedAtBlockInfo__blockNumber
  updatedAtBlockInfo__timestamp
}

type VaultDepositTx {
  id: ID!
  amount: BigInt!
  sender: Bytes!
  subject: Bytes!
  token: Bytes!
  totalReserve: BigInt!
  txHash: Bytes!
  blockInfo: BlockInfo!
}

input VaultDepositTx_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  subject: Bytes
  subject_not: Bytes
  subject_gt: Bytes
  subject_lt: Bytes
  subject_gte: Bytes
  subject_lte: Bytes
  subject_in: [Bytes!]
  subject_not_in: [Bytes!]
  subject_contains: Bytes
  subject_not_contains: Bytes
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  totalReserve: BigInt
  totalReserve_not: BigInt
  totalReserve_gt: BigInt
  totalReserve_lt: BigInt
  totalReserve_gte: BigInt
  totalReserve_lte: BigInt
  totalReserve_in: [BigInt!]
  totalReserve_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultDepositTx_filter]
  or: [VaultDepositTx_filter]
}

enum VaultDepositTx_orderBy {
  id
  amount
  sender
  subject
  token
  totalReserve
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
}

type VaultTransferTx {
  id: ID!
  amount: BigInt
  to: Bytes!
  subject: Bytes!
  token: Bytes!
  totalReserve: BigInt!
  txHash: Bytes!
  blockInfo: BlockInfo!
}

input VaultTransferTx_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  to: Bytes
  to_not: Bytes
  to_gt: Bytes
  to_lt: Bytes
  to_gte: Bytes
  to_lte: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  subject: Bytes
  subject_not: Bytes
  subject_gt: Bytes
  subject_lt: Bytes
  subject_gte: Bytes
  subject_lte: Bytes
  subject_in: [Bytes!]
  subject_not_in: [Bytes!]
  subject_contains: Bytes
  subject_not_contains: Bytes
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  totalReserve: BigInt
  totalReserve_not: BigInt
  totalReserve_gt: BigInt
  totalReserve_lt: BigInt
  totalReserve_gte: BigInt
  totalReserve_lte: BigInt
  totalReserve_in: [BigInt!]
  totalReserve_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockInfo: String
  blockInfo_not: String
  blockInfo_gt: String
  blockInfo_lt: String
  blockInfo_gte: String
  blockInfo_lte: String
  blockInfo_in: [String!]
  blockInfo_not_in: [String!]
  blockInfo_contains: String
  blockInfo_contains_nocase: String
  blockInfo_not_contains: String
  blockInfo_not_contains_nocase: String
  blockInfo_starts_with: String
  blockInfo_starts_with_nocase: String
  blockInfo_not_starts_with: String
  blockInfo_not_starts_with_nocase: String
  blockInfo_ends_with: String
  blockInfo_ends_with_nocase: String
  blockInfo_not_ends_with: String
  blockInfo_not_ends_with_nocase: String
  blockInfo_: BlockInfo_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [VaultTransferTx_filter]
  or: [VaultTransferTx_filter]
}

enum VaultTransferTx_orderBy {
  id
  amount
  to
  subject
  token
  totalReserve
  txHash
  blockInfo
  blockInfo__id
  blockInfo__hash
  blockInfo__blockNumber
  blockInfo__timestamp
}

